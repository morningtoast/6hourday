{"ts":1345040812157,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\n/******************************************\n * Debugging functions\n ******************************************/\n \tfunction debug($item) {\n \t\tif (DEBUG == TRUE) {\n \t\t\tif (is_array($item)) {\n \t\t\t\tarray_debug($item);\n \t\t\t} else {\n \t\t\t\tif (!$item) {\n \t\t\t\t\t$item = \"NO VALUE\";\n \t\t\t\t}\n \t\t\t\t\n \t\t\t\techo \"<pre>$item</pre>\";\n \t\t\t}\n \t\t}\n \t\treturn;\t\n \t}\n \t\n \t\n\n/******************************************\n * Array functions\n ******************************************/\n\n\t/**\n\t* Displays array\n\t*\n\t* This is a debugging function that will show the structure of the passed array.\n\t* @param array $array Array to display.\n\t* @return null\n\t*/\n\tfunction array_debug() {\n\t\t$args  = func_get_args();\n\t\t$count = func_num_args();\n\n\t\tif ($count > 1) {\n\t\t\tif (end($args) == 1) {\n\t\t\t\t$exit = TRUE;\n\t\t\t\tarray_pop($args);\n\t\t\t}\n\t\t}\n\n\t\tforeach ($args as $array) {\n\t\t\tif (is_array($array)) {\n\t\t\t\techo \"<pre>--- START\\n\";\n\t\t\t\tprint_r($array);\n\t\t\t\techo \"\\n--- END</pre>\";\n\t\t\t} else {\n\t\t\t\techo \"<p><code>-- Invalid array --</code></p>\";\n\t\t\t}\n\t\t}\n\n\t\tif ($exit) { exit(); }\n\n\t\treturn;\n\t}\n\n\n\t/**\n\t* Sort a multidimensional array\n\t*\n\t* Sorts an associative array by a specified field/column and retains keys and structure.\n\t* Taken from: http://fr3.php.net/manual/en/function.array-multisort.php\n\t* @param string $array Array to sort\n\t* @param string $list All secondary parameters are considered fields to sort by, given priority by order\n\t* @return array Sorted array\n\t*/\n\tfunction array_csort() {\n\t     $args   = func_get_args();\n\t     $marray = array();\n\n\t     if (is_array($args[0]) and (count($args[0]) > 0)) {\n\n\t\t     $marray    = array_shift($args);\n\t\t     $msortline = \"return(array_multisort(\";\n\t\t     foreach ($args as $arg) {\n\t\t         $i++;\n\t\t         if (is_string($arg)) {\n\t\t             foreach ($marray as $row) {\n\t\t                 $a = strtoupper($row[$arg]);\n\t\t                 $sortarr[$i][] = $a;\n\t\t             }\n\t\t         } else {\n\t\t             $sortarr[$i] = $arg;\n\t\t         }\n\t\t         $msortline .= \"\\$sortarr[\".$i.\"],\";\n\t\t     }\n\t\t     $msortline .= \"\\$marray));\";\n\n\t\t     eval($msortline);\n\t\t}\n\n\t    return($marray);\n\t}\n\n\n\t/**\n\t* Restore a saved array\n\t*\n\t* Reads the saved array flat file and restores it as an array\n\t* @param string $filepath Absolute path to save location\n\t* @return array Saved array as variable\n\t*/\n\tfunction array_load($filepath) {\n\t\tif (file_exists($filepath)) {\n\t\t\t$file = fopen($filepath, \"r\");\n\t\t\t$arraysource = fread($file, filesize($filepath));\n\t\t\tfclose($file);\n\n\t\t\t$thisarray = unserialize($arraysource);\n\t\t}\n\n\t\tif (!is_array($thisarray)) {\n\t\t\t$thisarray = array();\n\t\t}\n\n\t\treturn($thisarray);\n\t}\n\n\n\t/**\n\t* Save an array to a text file\n\t*\n\t* Flattens the array and makes it safe for saving as a text file.\n\t* @param string $filepath Absolute path to save location\n\t* @param array $array Array to be saved\n\t* @return array Passed array\n\t*/\n\tfunction array_save($filepath,$array) {\n\t\tif (!is_array($array)) {\n\t\t\t$array = array();\n\t\t}\n\n\t\t$file = fopen($filepath,\"w\");\n\t\tfputs($file, serialize($array));\n\t\tfclose($file);\n\n\t\treturn($array);\n\t}\n\n\n\t// Extract a single field into a standard array ** Recusrsion function **\n\tfunction array_extract() {\n\t\t$argcount = func_num_args();\n\t\t$args     = func_get_args();\n\t\t$list     = array();\n\n\t\tif (end($args) == 1) {\n\t\t\t$flat = TRUE;\n\t\t\tarray_pop($args);\n\t\t\t$argcount = count($args);\n\t\t}\n\n\t\tif ($argcount > 1) {\n\t\t\t$field = $args[0];\n\t\t\tarray_shift($args);\n\n\t\t\tfor ($a=0; $a < ($argcount-1); $a++) {\n\t\t\t\t$item = $args[$a];\n\n\t\t\t\tif (is_array($item)) {\n\t\t\t\t\tforeach ($item as $key => $elem) {\n\t\t\t\t\t\tif (is_array($elem)) {\n\t\t\t\t\t\t\t$grab = array_extract($field, $elem); // Recursion\n\t\t\t\t\t\t\t$list = array_merge($list, $grab);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ($key == $field) {\n\t\t\t\t\t\t\t\t$list[] = $elem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$list = array_unique($list);\n\n\t\tif ($flat) {\n\t\t\t$list = implode(\",\",$list);\n\t\t}\n\n\t\treturn($list);\n\t}\n\n\t// Apply a function to each element in an array\n\t// Works on multiarray - Different than array_walk()\n\t// ** Calls array $elem by reference **\n\tfunction array_each(&$elem, $func) {\n\t\tif (!is_array($elem)) {\n\t\t\t$elem = $func($elem);\n\t\t} else {\n\t\t\tforeach ($elem as $key => $value) {\n\t\t\t\t$elem[$key] = array_each($value, $func);\n\t\t\t}\n\t\t}\n\n\t\treturn($elem);\n\t}\n\n/******************************************\n * MySQL\n ******************************************/\n\n\t/**\n\t* Inserts a new record\n\t*\n\t* Takes specified array and inserts data as a new record.\n\t* Interprets array key as field name and value as value.\n\t* @param string $table Table name\n\t* @param array $data Array of data to insert\n\t* @param int $debug Set as 1 to display query without executing\n\t* @return int Record insert ID\n\t*/\n\tfunction mysql_insert($data, $table, $debug=FALSE) {\n\t\t$sql = \"insert into $table \";\n\n\t\tif (is_array($data)) {\n\t\t\tforeach ($data as $field => $value) {\n\t\t\t\t$fieldlist[] = $field;\n\n\t\t\t\tif (!is_numeric($value)) {\n\t\t\t\t\t$value = \"'\".addslashes($value).\"'\";\n\t\t\t\t}\n\n\t\t\t\t$valuelist[] = $value;\n\t\t\t}\n\n\t\t\t$fieldlist = implode(\",\",$fieldlist);\n\t\t\t$valuelist = implode(\",\",$valuelist);\n\n\t\t\t$sql = $sql. \"($fieldlist) values ($valuelist)\";\n\t\t} else {\n\t\t\t$debug = TRUE;\n\t\t}\n\n\t\tif ($debug == FALSE) {\n\t\t\tmysql_query($sql);\n\t\t\t$insertid = mysql_insert_id();\n\t\t} else {\n\t\t\techo \"<pre>$sql</pre>\";\n\t\t}\n\n\n\t\treturn($insertid);\n\t}\n\n\t/**\n\t* Updates an existing record\n\t*\n\t* Takes specified array and updates an existing record.\n\t* Interprets array key as field name and value as value.\n\t* @param string $table Table name\n\t* @param array $data Array of data to insert\n\t* @param string $condition Required condition to update query.\n\t* @param int $debug Set as 1 to display query without executing\n\t* @return int TRUE on success, FALSE on failure\n\t*/\n\tfunction mysql_update($data, $table, $condition,$debug=\"0\") {\n\t\t$sql = \"update $table set\";\n\n\t\tif (is_array($data)) {\n\t\t\tforeach ($data as $field => $value) {\n\t\t\t\tif (!is_numeric($value)) {\n\t\t\t\t\t$value = \"'\".addslashes($value).\"'\";\n\t\t\t\t}\n\n\t\t\t\t$query[] = \"$field=\".$value;\n\t\t\t}\n\n\t\t\t$query = implode(\",\",$query);\n\n\t\t\t$sql = trim($sql).\" \".trim($query).\" \".trim($condition);\n\t\t} else {\n\t\t\t$debug     = 1;\n\t\t\t$condition = 1;\n\t\t}\n\n\t\tif ($debug <= 0 and $condition) {\n\t\t\t$success = mysql_query($sql);\n\t\t} else {\n\t\t\techo \"<pre>$sql</pre>\";\n\t\t}\n\n\t\treturn($success);\n\t}\n\n\n\t/**\n\t* Returns an array list\n\t*\n\t* Takes given query and returns a standard array of all matching records.\n\t* The second parameter is optional and can be the name of a field you want to be the key of array cells. Should be unique!\n\t* If the specified field is not found, the list is returned as a regular array.\n\t* @param string $query MySQL query\n\t* @param string $key Name of field to use as array key\n\t* @return array Array of matching records\n\t*/\n\tfunction mysql_query_list($query,$key=FALSE,$grouped=false) {\n\t\t$list = array();\n\t\t$result=mysql_query($query);\n\t\tfor ($a=0; $myrow=mysql_fetch_assoc($result); $a++) {\n\t\t\t$fields = count($myrow);\n\n\t\t\tif ($key and array_key_exists($key,$myrow)) {\n\t\t\t\t$m_key = $myrow[$key];\n\t\t\t\tif ($fields == 2) {\n\t\t\t\t\tunset($myrow[$key]);\n\n\t\t\t\t\t$list[$m_key] = current($myrow);\n\t\t\t\t} else {\n\t\t\t\t\tif (!$grouped) {\n\t\t\t\t\t\t$list[$m_key][] = $myrow;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$list[$m_key] = $myrow;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($fields <= 1) {\n\t\t\t\t\t$list[] = current($myrow);\n\t\t\t\t} else {\n\t\t\t\t\t$list[] = $myrow;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn($list);\n\t}\n\n\t/**\n\t* Escapes all values for MySQL use\n\t*\n\t* Takes any size array and makes each value MySQL-safe by escaping\n\t* all special characters as needed.\n\t*\n\t* For non-arrays, use the regular mysql_real_escape_string() function.\n\t* @param string $array Any size array with values that will be put in the database\n\t* @return array Same size array with escaped values\n\t*/\n\tfunction mysql_safe_array($array) {\n\t\t$array = array_each($array, mysql_real_escape_string);\n\n        return($array);\n\t}\n\n/******************************************\n * File system\n ******************************************/\n\n\t/**\n\t* Appends array to CSV file\n\t*\n\t* Takes specified array and appends it to a CSV file. Each array value is seen as one column value.\n\t* All values are escaped with double quotes.\n\t* Checks for valid directory location before writing.\n\t* @param array $data Array of data to write\n\t* @param string $filepath Path to write CSV file\n\t* @param int $maxsize Maximum file size. If this size is exceeded, the file will be deleted.\n\t* @return int TRUE on success, FALSE on failure\n\t*/\n\tfunction file_csvlog($data,$filepath,$maxsize=\"0\") {\n\t\t$logdir = dirname($filepath);\n\n\t\tif (is_dir($logdir)) {\n\t\t\tif (file_exists($filepath)) {\n\t\t\t\tif ((filesize($filepath) > $maxsize) and ($maxsize > 0)) {\n\t\t\t\t\tunlink($filepath);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach ($data as $item) {\n\t\t\t\t$line[] = \"\\\"\".$item.\"\\\"\";\n\t\t\t}\n\n\t\t\t$line    = implode(\",\",$line).\"\\r\\n\";\n\t\t\t$success = error_log($line,3,$filepath);\n\t\t}\n\n\t\treturn($success);\n\t}\n\n\t/**\n\t* Reads a CSV file into an array\n\t*\n\t* Reads a standard CSV file and returns an array.\n\t* Array structure contains a node for each line, then an array for each column value.\n\t* Accounting for a header row uses header labels as keys in returned array. Header row is not returned in array.\n\t* @param string $filepath Path to CSV file\n\t* @param string $headerRow Set to 1 to account for and use header row.\n\t* @param int $maxsize Maximum file size. If this size is exceeded, the file will be deleted.\n\t* @return array Array of CSV file\n\t*/\n\tfunction file_readcsv($filepath,$headerRow=\"0\") {\n\t\t$array  = array();\n\n\t\tif (file_exists($filepath)) {\n\t\t\t$row    = 0;\n\t\t\t$handle = fopen($filepath, \"r\");\n\t\t\twhile (($data = fgetcsv($handle, 1024, \",\")) !== FALSE) {\n\t\t\t   $size = count($data);\n\n\t\t\t\tif ($row <= 0 and $headerRow > 0) {\n\t\t\t\t\t$header = $data;\n\t\t\t   \t}\n\n\t\t\t\tif (is_array($header)) {\n\t\t\t\t\tfor ($a=0; $a < $size; $a++) {\n\t\t\t\t\t\t$array[$row][$header[$a]] = $data[$a];\n\t\t\t    \t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ($a=0; $a < $size; $a++) {\n\t\t\t\t\t\t$array[$row][] = $data[$a];\n\t\t\t    \t}\n\t\t\t   }\n\n\t\t\t   $row++;\n\t\t\t}\n\t\t\tfclose($handle);\n\n\t\t\tif (is_array($header)) {\n\t\t\t\tarray_shift($array);\n\t\t\t}\n\t\t}\n\n \t\treturn($array);\n\t}\n\n\t// Alias call to file_readcsv()\n\tfunction file_parsecsv($filepath,$headerRow=\"0\") {\n\t\t$array = file_readcsv($filepath,$headerRow);\n\n\t\treturn($array);\n\t}\n\n\t/**\n\t* Parses a file by line\n\t*\n\t* Reads a file and returns an array. One node per line.\n\t* This is an alternate for the file() function. Checks for existing file before read.\n\t* @param string $filepath Path to file\n\t* @return array Array of file line-by-line\n\t*/\n\tfunction file_lineparse($filepath) {\n\t\t$array = array();\n\n\t\tif (file_exists($filepath)) {\n\t\t\t$source = file($filepath);\n\n\t\t\tforeach ($source as $line) {\n\t\t\t\t$array[] = trim($line);\n\t\t\t}\n\t\t}\n\n\t\treturn($array);\n\t}\n\n\t/**\n\t* Reads a file into a string\n\t*\n\t* Reads a file or URL into a string.\n\t* This is an alternate for the file_get_contents() function. Checks for existing file before read.\n\t* @param string $filepath Path to file\n\t* @return string Contents of file\n\t*/\n\tfunction file_read($filepath) {\n\t\tif (file_exists($filepath)) {\n\t\t\t$string = file_get_contents($filepath);\n\t\t}\n\n\t\treturn($string);\n\t}\n\n\t/**\n\t* Writes a string to a file\n\t*\n\t* Writes a string to a new file. Will overwrite file if it already exists.\n\t* Checks for a valid directory file writing file.\n\t* @param string $filepath Path to file\n\t* @return string Contents of file\n\t*/\n\tfunction file_write($string,$filepath) {\n\t\t$logdir = dirname($filepath);\n\n\t\tif (is_dir($logdir)) {\n\t\t\t$file=fopen($filepath,\"w\");\n\t\t\tfputs($file, $string);\n\t\t\tfclose($file);\n\t\t}\n\n\t\treturn($file);\n\t}\n\n\t// Prepend XML header to string and write to a file\n\tfunction file_writexml($string, $filepath) {\n\t\t$string = \"<?xml version=\\\"1.0\\\" ?>\\r\\n\".$string;\n\t\t$file = file_write($string, $filepath);\n\n\t\treturn($file);\n\t}\n\t\n\t// Append to a file, with size limit\n\tfunction file_append($data,$filepath,$maxsize=\"0\") {\n\n\t\tif (file_exists($filepath)) {\n\t\t\tif ((filesize($filepath) > $maxsize) and ($maxsize > 0)) {\n\t\t\t\tunlink($filepath);\n\t\t\t}\n\t\t}\n\n\t\t$success = error_log($data.\"\\n\",3,$filepath);\n\n\t\treturn($success);\n\t}\t\n\n/******************************************\n * Date/Time\n ******************************************/\n\n\t/**\n\t* Formats date as standard MySQL-friend\n\t*/\n\tfunction date_formatX($date, $format=\"Y-m-d\") {\n\t\t$date = date($format, strtotime($date));\n\n\t\treturn($date);\n\t}\t\n\t\n\tfunction date_standard($date, $format=\"m/d/Y\") {\n\t\t$date = date($format, strtotime($date));\n\n\t\treturn($date);\n\t}\n\n\t/**\n\t* Calculates a new date\n\t*\n\t* Takes a standard formatted date (YYYY-MM-DD) and adds a value to calculate a new date.\n\t* @param date $date Standard formatted date\n\t* @param int $int Number of days to add to the date, default is zero\n\t* @return date New date in standard format\n\t*/\n\tfunction date_calc($date, $int=0) {\n\t\t$date       = date(\"Y-m-d\",strtotime($date));\n\t\t$this_month = date(\"m\",strtotime($date));\n\t\t$this_day   = date(\"d\",strtotime($date));\n\t\t$this_year  = date(\"Y\",strtotime($date));\n\n\t\t$date = date(\"Y-m-d\", mktime(0,0,0,$this_month,($this_day+$int),$this_year));\n\n\t\treturn($date);\n\t}\n\n\t/**\n\t* Gets dates of current week\n\t*\n\t* Takes a standard formatted date (YYYY-MM-DD) and returns a standard array containing the 7 days that make up that week.\n\t* You can optionally select what day is used as the start of the week.\n\t* NOTE: Requires date_calc() function\n\t* @param date $date Standard formatted date\n\t* @param string $weekstart Name of the day that should be used as start of the week. Default is \"Sunday\"\n\t* @return array Standard array containing 7 dates\n\t*/\n\tfunction date_getweek($date, $weekstart=\"Sunday\", $days=7) {\n\t\t$weekstart  = ucfirst($weekstart);\n\t\t$currentday = date(\"l\",strtotime($date));\n\t\t$daterange  = array();\n\t\t$mathdate   = $date;\n\n\t\tif ($currentday != $weekstart) {\n\t\t\twhile ($dayname != $weekstart) {\n\t\t\t\t$mathdate    = date_calc($mathdate,-1);\n\t\t\t\t$dayname     = date(\"l\",strtotime($mathdate));\n\t\t\t}\n\t\t}\n\n\t\tfor ($a=0; $a < $days; $a++) {\n\t\t\t$daterange[] = date_calc($mathdate,$a);\n\t\t}\n\n\t\treturn($daterange);\n\t}\n\t\n\t\n\t/**\n\t* Gets different of two dates\n\t*\n\t* Takes two standard formatted date (YYYY-MM-DD) and returns the differen between the two as specified\n\t* by the second parameter\n\t* @param date $then Standard formatted date\n\t* @param date $now Standard formatted date\t\n\t* @param string $count Count to return. y|m|d [d]\n\t*/\t\n\tfunction date_change($then, $now, $count=\"d\") {\n\t\t$diff = abs(strtotime($then) - strtotime($now));\n\n\t\t$years  = floor($diff / (365*60*60*24));\n\t\t$months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));\n\t\t$days   = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));\n\t\n\t\tswitch ($count) {\n\t\t\tcase \"y\": return($years); break;\n\t\t\tcase \"m\": return($months); break;\n\t\t\tdefault:\n\t\t\tcase \"d\":\n\t\t\t\treturn($days); \n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t}\n\t}\n\n\n/******************************************\n * URLs\n ******************************************/\n\n\t/**\n\t* Generates new URL query\n\t*\n\t* Combines the current URL with passed variables to generate a new URL with new GET arguements.\n\t* @param array $replace Array with GET var name as key and value as value\n\t* @param array $exclude Array with GET var name as value. Matching GET vars will not be included in new URL\n\t* @return string Complete URL GET arguements from the ? on (including ?) - Ready for file append\n\t*/\n\tfunction url_build_query($replace=array(), $exclude=array(), $noget=0) {\n\t\t$list     = array();\n\t\t$query    = array();\n\n\t\t// Build array of values from GET\n\t\tif ($noget <= 0) {\n\t\t\tforeach ($_GET as $var => $value) {\n\t\t\t\t$list[$var] = $value;\n\t\t\t}\n\t\t}\n\n\t\t// Build array of values from passed\n\t\tforeach ($replace as $var => $value) {\n\t\t\t$list[$var] = $value;\n\t\t}\n\n\t\t// Remove any excluded values\n\t\tforeach ($list as $key => $value) {\n\t\t\tif (in_array($key, $exclude)) {\n\t\t\t\tunset($list[$key]);\n\t\t\t}\n\t\t}\n\n\t\t// Put variables into query string form\n\t\tforeach ($list as $var => $value) {\n\t\t\t$query[] = $var.\"=\".urlencode($value);\n\t\t}\n\n\t\t$query = implode(\"&\",$query);\n\n\t\treturn($query);\n\t}\n\n/******************************************\n * Mail\n ******************************************/\n\n\t/**\n\t* Sends e-mail to a specified recipient.\n\t*\n\t* Sends e-mail to the specified recipient using the mail() server function. Validtes recipient e-mail address.\n\t* Creates the e-mail header based on passed valuse.\n\t* @param string $sendto The recipient's e-mail address\n\t* @param string $fromname Friendly name of the sender (appears in From: header)\n\t* @param string $fromMail Sender's e-mail address (appears in From: header)\n\t* @param string $subject Subject of the e-mail\n\t* @param string $message Main body of the e-mail message\n\t* @return null\n\t*/\n\tfunction mail_send($recipient,$fromname,$fromMail,$subject,$message) {\n\t\t$regex = \"/^[A-z0-9][\\w.-]*@[A-z0-9][\\w\\-\\.]+\\.[A-z0-9]{2,6}$/\";\n\t\tif (preg_match($regex, $recipient)) {\n\t\t\t$mailheaders  = \"From: $fromname <$fromMail>\\n\";\n\t\t\t$subject      = stripslashes($subject);\n\t\t\t$message      = stripslashes($message);\n\n\t\t\t$success = mail($recipient,$subject,$message,$mailheaders);\n/*\n\t\t\tif ($success) {\n\t\t\t\techo \"<!-- Mail sent to $recipient - \".date(\"r\").\"-->\\n\";\n\t\t\t}\n*/\t\t\t\n\t\t}\n\n\t\treturn($success);\n\t}\n\t\n\tfunction mail_isValidAddress($mail) {\n\t\t$regex = \"/^[A-z0-9][\\w.-]*@[A-z0-9][\\w\\-\\.]+\\.[A-z0-9]{2,6}$/\";\n\t\tif (preg_match($regex, $mail)) { return true; } else { return false; }\n\t}\n\n\n\n/******************************************\n * Strings and variables\n ******************************************/\n\n\t/**\n\t* Generates a random string of characters\n\t*\n\t* Generates a string of a specified length of random alphanumeric characters, or of a specified range of characters\n\t* @param string $charset Characters to consider for randomization, default is all alphanumerics\n\t* @param int $length Size of the string to return\n\t* @return string Random string of characters, will not include any special characters\n\t*/\n\tfunction str_randomchar($length=15, $charset=\"all\") {\n\t\tif ($charset==\"all\") {\n\t\t\t$charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\t\t}\n\n\t\t$charsize = strlen($charset)-1;\n\n\t\t$randstring = \"\";\n\t\tfor ($a=0; $a < $length; $a++) {\n\t\t\t$randpos     = rand(0,$charsize);\n\t\t\t$randstring .= substr($charset,$randpos,1);\n\t\t}\n\n\t\treturn($randstring);\n\t}\n\n\t/**\n\t* Makes text display-safe\n\t*\n\t* Removes invalid HTML tags and extra whitespace/breaks\n\t* @param string $text Text to clean\n\t* @return string Cleaned text\n\t*/\n\tfunction str_clean($string) {\n\t\t$string = trim($string);\n\t\t$string = strip_tags($string,\"<p><i><em><b><strong><u><a>\"); // Remove all tags except shown\n\t\t$string = nl2br($string);\n\t\t//$string = stripslashes($string);\n\n\n\t\treturn($string);\n\t}\n\n\t// Turn patterns into regular HTML, including line breaks\n\tfunction str_tohtml($string) {\n\t\t$string = str_tolink($string);\n\t\t$string = str_tomail($string);\n\n\t\treturn($string);\n\t}\n\t\n\t// Add http:// to front of string if not present\n\tfunction str_toHttp($string) {\n\t\tif (!eregi(\"http\",$string)) {\n\t\t\t$string = \"http://\".$string;\n\t\t}\n\n\t\treturn($string);\n\t}\n\t\n\n\t// Converts full path URLs into hyperlinks\n\tfunction str_tolink($string) {\n\t\t$string = ereg_replace('http://[a-zA-z0-9\\.\\,\\~\\/\\_\\?\\&-\\=\\:]*', '<a href=\"\\\\0\">\\\\0</a>', $string);\n\t\t$string = ereg_replace('https://[a-zA-z0-9\\.\\,\\~\\/\\_\\?\\&-\\=\\:]*', '<a href=\"\\\\0\">\\\\0</a>', $string);\n\t\t$string = ereg_replace('file://[a-zA-z0-9\\.\\,\\~\\/\\_\\?\\&-\\=\\:]*', '<a href=\"\\\\0\">\\\\0</a>', $string);\n\t\t$string = ereg_replace('ftp://[a-zA-z0-9\\.\\,\\~\\/\\_\\?\\&-\\=\\:]*', '<a href=\"\\\\0\">\\\\0</a>', $string);\n\n\t\treturn($string);\n\t}\n\n\t// Converts e-mail addresses into mailto hyperlinks\n\tfunction str_tomail($string) {\n\t\t$string = ereg_replace('[_a-zA-z0-9\\-]+(\\.[_a-zA-z0-9\\-]+)*\\@' . '[_a-zA-z0-9\\-]+(\\.[a-zA-z]{1,3})+', '<a href=\"mailto:\\\\0\">\\\\0</a>', $string);\n\t\treturn($string);\n\t}\n\n\t// Escape special characters in XML element values\n\tfunction str_cleanxml($string) {\n\t\t$string = htmlspecialchars(htmlentities($string));\n\n\t\treturn($string);\n\t}\n\n\t// Returns the first 40 words of a string. Maximum of 55 words returned.\n\tfunction str_summary($text, $max=40, $morelink=FALSE) {\n\t\t$text  = ereg_replace(\"[\\r\\n]\",\" \",$text);\n\t\t$split = explode(\" \",$text);\n\n\t\t$count   = 0;\n\t\t$summary = array();\n\t\tforeach ($split as $word) {\n\t\t\tif ($word != \" \") {\n\t\t\t\t$word = trim($word);\n\t\t\t\t$size = strlen($word)-1;\n\n\t\t\t\t$lastchar  = substr($word,$size,1);\n\t\t\t\t$summary[] = $word;\n\n\t\t\t\tif (ereg(\"[\\.\\!\\?]\",$lastchar) and ($count >= $max)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$count++;\n\n\t\t\t\tif ($count >= ($max+15)) { break; }\n\t\t\t} else {\n\t\t\t\t$summary[] = \"\\r\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif ($count >= $max) {\n\t\t\tif ($morelink) {\n\t\t\t\t$summary[] = \"<em><a href=\\\"\".$morelink.\"\\\">...More</a></em>\";\n\t\t\t} else {\n\t\t\t\t$summary[] = \"<em>...More</em>\";\n\t\t\t}\n\t\t}\n\n\t\t$text = implode(\" \",$summary);\n\n\t\treturn($text);\n\t}\n\n\t// Return variable name\n\tfunction varname(&$var, $scope=false, $prefix='unique', $suffix='value') {\n\t\tif ($scope) {\n\t\t\t$vals = $scope;\n\t\t} else {\n\t\t\t$vals = $GLOBALS;\n\t\t}\n\n   \t\t$old = $var;\n   \t\t$var = $new = $prefix.rand().$suffix;\n   \t\t$vname = FALSE;\n\n   \t\tforeach($vals as $key => $val) {\n     \t\tif($val === $new) {\n     \t\t\t$vname = \"$\".$key;\n     \t\t}\n     \t}\n\n\t\t$var = $old;\n\n   \t\treturn($vname);\n\t}\n\n\t// Get keywords from passed string\n\t// Optional file of stop words for comparing\n\tfunction str_keywords($phrase, $stopfile=FALSE) {\n\t\t$stopwords   = array();\n\t\t$keywords    = array();\n\t\t$keywordlist = explode(\" \",$phrase);\n\n\t\tif ($stopfile == TRUE) {\n\t\t\t$wordlist  = file_read($stopfile);\n\t\t\t$wordlist  = strtolower($wordlist);\n\t\t\t$stopwords = explode(\"\\r\\n\",$wordlist);\n\t\t}\n\n\t\tforeach ($keywordlist as $word) {\n\t\t\tif (!in_array(strtolower($word),$stopwords)) {\n\t\t\t\t$keywords[] = $word;\n\t\t\t}\n\t\t}\n\n\t\treturn($keywords);\n\t}\n\n\n\tfunction verbose($string) {\n\t\tglobal $verbose;\n\n\t\tif ($verbose == TRUE) {\n\t\t\techo \"<pre>$string</pre>\\n\";\n\t\t}\n\n\t\treturn;\n\t}\n\n/******************************************\n * Integers/Math\n ******************************************/\n\n\t// Returns proper ordinal suffix for any number\n\tfunction int_ordinal($number) {\n\t    if ($number % 100 > 10 && $number %100 < 14) {\n\t        $suffix = \"th\";\n\t    } else {\n\t        switch($number % 10) {\n\n\t            case 0:\n\t                $suffix = \"th\";\n\t                break;\n\n\t            case 1:\n\t                $suffix = \"st\";\n\t                break;\n\n\t            case 2:\n\t                $suffix = \"nd\";\n\t                break;\n\n\t            case 3:\n\t                $suffix = \"rd\";\n\t                break;\n\n\t            default:\n\t                $suffix = \"th\";\n\t                break;\n\t        }\n\t    }\n\n\t    return($number.$suffix);\n\t}\n\n/******************************************\n * HTML\n ******************************************/\n\n\t// Create regular HTML unordered list\n\tfunction html_list($array, $ulclass=\"\", $liclass=\"\") {\n\t\tif (is_array($array)) {\n\t\t\tif ($ulclass) {\n\t\t\t\t$firstchar = substr($ulclass,0,1);\n\n\t\t\t\tif ($firstchar == \"#\") {\n\t\t\t\t\t$ulclass = \" id=\\\"\".$ulclass.\"\\\"\";\n\t\t\t\t} else {\n\t\t\t\t\t$ulclass = \" class=\\\"\".$ulclass.\"\\\"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($liclass) {\n\t\t\t\t$liclass = \" class=\\\"\".$liclass.\"\\\"\";\n\t\t\t}\n\n\t\t\techo \"<ul$ulclass>\\n\";\n\n\t\t\tforeach ($array as $label => $url) {\n\t\t\t\tif (!is_numeric($label)) {\n\t\t\t\t\t$free   = explode(\"|\",$url);\n\n\t\t\t\t\tif ($free[1]) {\n\t\t\t\t\t\t$target = \" target=\\\"\".$free[1].\"\\\"\";\n\t\t\t\t\t\t$url    = $free[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tunset($target);\n\t\t\t\t\t}\n\n\t\t\t\t\techo \"<li$liclass><a href=\\\"\".$url.\"\\\"$target>\".$label.\"</a></li>\\r\\n\";\n\t\t\t\t} else {\n\t\t\t\t\techo \"<li$liclass>\".$url.\"</li>\\r\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t?>\n\t\t\t\t</ul>\n\t\t<?\n\t\t}\n\n\t\treturn;\n\t}\n\n\t// Take array and output as dropdown menu\n\tfunction html_form_dropdown($array, $selected=\"null\", $name=\"null\", $reverse=FALSE) {\n\t\tif (is_array($array)) {\n\t\t\tforeach ($array as $label => $value) {\n\t\t\t\tif ($reverse == TRUE) {\n\t\t\t\t\t$save = $value;\n\t\t\t\t\t$value = $label;\n\t\t\t\t\t$label = $save;\n\t\t\t\t}\n\n\t\t\t\tif (($value == $selected) and ($selected != \"null\")) {\n\t\t\t\t\t$thisone = \" selected\";\n\t\t\t\t} else {\n\t\t\t\t\tunset($thisone);\n\t\t\t\t}\n\n\t\t\t\t$list .= \"<option value=\\\"\".$value.\"\\\"$thisone>\".$label.\"</option>\\r\\n\";\n\t\t\t}\n\n\t\t\tif ($name != \"null\" and $name != \"\") {\n\t\t\t\t?>\n\t\t\t\t<select name=\"<? echo $name; ?>\" id=\"<?= $name; ?>\"><? echo $list; ?></select>\n\t\t\t\t<?\n\t\t\t} else {\n\t\t\t\techo $list;\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\n\t// Look for 'checked' values from array\n\t// !! Reference variable alters existing array !!\n\tfunction html_form_getchecked(&$array, $field, $match, $thisone=\"checked\") {\n\t\tif (is_array($array)) {\n\t\t\tif (array_key_exists($field, $array)) {\n\t\t\t\tif ($array[$field] == $match) {\n\t\t\t\t\t$array[$field] = $thisone;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn($array);\n\t}\n\n\t// Check alternate row coloring\n\tfunction html_rowcolor($color, $class=\"altrow\") {\n\t\tif ($color == $class) {\n\t\t\t$color = \"\";\n\t\t} else {\n\t\t\t$color = $class;\n\t\t}\n\n\t\treturn($color);\n\t}\n\n\t// Make all GET variables hidden form variables\n\tfunction html_form_hiddenfields() {\n\t\t$args = func_get_args();\n\n\t\tforeach ($_GET as $var => $value) {\n\t\t\tif (!in_array($var,$args)) {\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"\".$var.\"\\\" value=\\\"\".$value.\"\\\">\\n\";\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n/******************************************\n * FTP\n ******************************************/\n\tfunction ftp($host, $username, $password) {\n\t\t$connect = ftp_connect($host);\n\t\t$success = ftp_login($connect, $username, $password);\n\n\t\tif ($success) {\n\t\t\treturn($connect);\n\t\t} else {\n\t\t\techo \"<pre>FTP Attempt failed</pre>\";\n\t\t\treturn;\n\t\t}\n\t}\n\n/******************************************\n * Image manipulations (GD library)\n ******************************************/\n\n/******************************************\n * Call functions\n * Brian Vaughn, 11/18/2004\n ******************************************/\n\n\t/**\n\t* Get thumbnail dimensions for an image\n\t*\n\t* Takes the original dimensions of the named image file and calculates the correct proportions for the resized image.\n\t* Use this function for thumbnails and force fitting images that may be too large.\n\t* Note: This function does not create image files. Use it to get dimensions to resize an image use HTML.\n\t*\n\t* If you provide a maximum height greather than zero, the function continue to calculate dimensions until it is below the maximum height.\n\t* This means the final width may be smaller than the maximum width desired.\n\t*\n\t* Returned array has the following keys and values:\n\t* - height, integer of height\n\t* - width, integer of width\n\t* @param string $imgpath Absolute path to the image file\n\t* @param int $maxwidth Maximum width of the resized dimensions\n\t* @param int $maxheight Maximum height of the resized dimensions\n\t* @return array Associative array contain the dimensions. See comments for structure.\n\t*/\n\tfunction image_resizedimensions($imgpath,$maxwidth=\"125\",$maxheight=\"0\") {\n\t\t$imagehw     = image_getsize($imgpath);\n\t\t$imagewidth  = $imagehw[\"width\"];\n\t\t$imageheight = $imagehw[\"height\"];\n\t\t$imgorig     = $imagewidth;\n\n\t\tif ($imagewidth > $maxwidth) {\n\t\t\t$imageprop   = ($maxwidth*100)/$imagewidth;\n\t\t\t$imagevsize  = ($imageheight*$imageprop)/100;\n\t\t\t$imagewidth  = $maxwidth;\n\t\t\t$imageheight = ceil($imagevsize);\n\t\t}\n\n\t\twhile (($imageheight > $maxheight) and ($maxheight > 0)) {\n\t\t\t$maxwidth = $maxwidth - 5;\n\n\t\t\tif ($imagewidth > $maxwidth) {\n\t\t\t\t$imageprop   = ($maxwidth*100)/$imagewidth;\n\t\t\t\t$imagevsize  = ($imageheight*$imageprop)/100;\n\t\t\t\t$imagewidth  = $maxwidth;\n\t\t\t\t$imageheight = ceil($imagevsize);\n\t\t\t}\n\t\t}\n\n\t\t$thumbnail = array(\n\t\t\t\t\t\t\t\"height\" => $imageheight,\n\t\t\t\t\t\t\t\"width\"  => $imagewidth\n\t\t\t\t\t\t);\n\t\treturn($thumbnail);\n\t}\n\n\t// Resize an image and display\n\tfunction image_resizeX($path, $saveas=FALSE, $newwidth, $newheight=\"0\") {\n\t\t$filename = basename($path);\n\t\t$filepath = dirname($path);\n\n\t\t$newsize = image_resizedimensions($filepath.\"/\".$filename,$newwidth,$newheight);\n\n\t\t$gd = new ImageEditor($filename, $filepath);\n\t\t$gd->resize($newsize[\"width\"], $newsize[\"height\"]);\n\n\t\tif ($saveas) {\n\t\t\t$savename = basename($saveas);\n\t\t\t$savepath = dirname($saveas).\"/\";\n\n\t\t\t$gd->outputFile($savename, $savepath);\n\t\t} else {\n\t\t\t$gd->outputImage();\n\t\t}\n\n\t\treturn;\n\t}\n\n\n\t/**\n\t* Get image dimensions\n\t*\n\t* Returns an array of image dimensions in pixels. This is a alternate call for GetImageSize()\n\t* This function checks for existing file before attempting native function call.\n\t*\n\t* Returned array has the following keys and values:\n\t* - height, integer of height\n\t* - width, integer of width\n\t* @param string $path Absolute path to the image file\n\t* @return array Associative array contain the dimensions. See comments for structure.\n\t*/\n\tfunction image_getsize($path) {\n\t\t$imgsize = array();\n\n\t\tif (file_exists($path)) {\n\t\t\t$imagehw           = GetImageSize($path);\n\t\t\t$imgsize[\"width\"]  = $imagehw[0];\n\t\t\t$imgsize[\"height\"] = $imagehw[1];\n\t\t}\n\n\t\treturn($imgsize);\n\t}\n\n/******************************************\n *  Script Info\n *  ===========\n *  File: ImageEditor.php\n *  Created: 05/06/03\n *  Modified: 05/06/03\n *  Author: Ash Young (ash@evoluted.net\n *  Website: http: * evoluted.net/php/image-editor.htm\n *  Requirements: PHP with the GD Library\n * Description\n *  ===========\n *  This class allows you to edit an image easily and\n *  quickly via php.\n * If you have any functions that you like to see\n *  implemented in this script then please just send\n *  an email to ash@evoluted.net\n * Limitations\n *  ===========\n *  - GIF Editing: this script will only edit gif files\n *      your GD library allows this.\n * Image Editing Functions\n *  =======================\n *  resize(int width, int height)\n *     resizes the image to proportions specified.\n * crop(int x, int y, int width, int height)\n *     crops the image starting at (x, y) into a rectangle\n *     width wide and height high.\n * addText(String str, int x, int y, Array color)\n *     adds the string str to the image at position (x, y)\n *     using the colour given in the Array color which\n *     represents colour in RGB mode.\n * addLine(int x1, int y1, int x2, int y2, Array color)\n *     adds the line starting at (x1,y1) ending at (x2,y2)\n *     using the colour given in the Array color which\n *     represents colour in RGB mode.\n * Useage\n *  ======\n *  First you are required to include this file into your\n *  php script and then to create a new instance of the\n *  class, giving it the path and the filename of the\n *  image that you wish to edit. Like so:\n * include(\"ImageEditor.php\");\n *  $imageEditor = new ImageEditor(\"filename.jpg\", \"directoryfileisin/\");\n * After you have done this you will be able to edit the\n *  image easily and quickly. You do this by calling a\n *  function to act upon the image. See below for function\n *  definitions and descriptions see above. An example\n *  would be:\n * $imageEditor->resize(400, 300);\n * This would resize our imported image to 400 pixels by\n *  300 pixels. To then export the edited image there are\n *  two choices, out put to file and to display as an image.\n *  If you are displaying as an image however it is assumed\n *  that this file will be viewed as an image rather than\n *  as a webpage. The first line below saves to file, the\n *  second displays the image.\n * $imageEditor->outputFile(\"filenametosaveto.jpg\", \"directorytosavein/\");\n * $imageEditor->outputImage();\n/****************************************************************/\n\nclass ImageEditor {\n  var $x;\n  var $y;\n  var $type;\n  var $img;\n  var $error;\n\n  /****************************************************************/\n  // CONSTRUCTOR\n  /****************************************************************/\n  function ImageEditor($filename, $path, $col=NULL)\n  {\n    $this->error = false;\n    if(is_numeric($filename) && is_numeric($path))\n    // IF NO IMAGE SPECIFIED CREATE BLANK IMAGE\n    {\n      $this->x = $filename;\n      $this->y = $path;\n      $this->type = \"jpg\";\n      $this->img = imagecreatetruecolor($this->x, $this->y);\n      if(is_array($col))\n      // SET BACKGROUND COLOUR OF IMAGE\n      {\n        $colour = ImageColorAllocate($this->img, $col[0], $col[1], $col[2]);\n        ImageFill($this->img, 0, 0, $colour);\n      }\n    }\n    else\n    // IMAGE SPECIFIED SO LOAD THIS IMAGE\n    {\n      // FIRST SEE IF WE CAN FIND IMAGE\n\n      if(file_exists($path . $filename))\n      {\n        $file = $path . $filename;\n      }\n      else if (file_exists($path . \"/\" . $filename))\n      {\n        $file = $path . \"/\" . $filename;\n      }\n      else\n      {\n        $this->errorImage(\"File Could Not Be Loaded\");\n      }\n\n      if(!($this->error))\n      {\n        // LOAD OUR IMAGE WITH CORRECT FUNCTION\n        $this->type = strtolower(end(explode('.', $filename)));\n        if ($this->type == 'jpg' || $this->type == 'jpeg')\n        {\n          $this->img = @imagecreatefromjpeg($file);\n        }\n        else if ($this->type == 'png')\n        {\n          $this->img = @imagecreatefrompng($file);\n        }\n        else if ($this->type == 'gif')\n        {\n          $this->img = @imagecreatefrompng($file);\n        }\n        // SET OUR IMAGE VARIABLES\n        $this->x = imagesx($this->img);\n        $this->y = imagesy($this->img);\n      }\n    }\n  }\n\n  /****************************************************************/\n  // RESIZE IMAGE GIVEN X AND Y\n  /****************************************************************/\n  function resize($width, $height)\n  {\n    if(!$this->error)\n    {\n      $tmpimage = imagecreatetruecolor($width, $height);\n      imagecopyresampled($tmpimage, $this->img, 0, 0, 0, 0,\n                           $width, $height, $this->x, $this->y);\n      imagedestroy($this->img);\n      $this->img = $tmpimage;\n      $this->y = $height;\n      $this->x = $width;\n    }\n  }\n\n  /****************************************************************/\n  // CROPS THE IMAGE, GIVE A START CO-ORDINATE AND\n  // LENGTH AND HEIGHT ATTRIBUTES\n  /****************************************************************/\n  function crop($x, $y, $width, $height)\n  {\n    if(!$this->error)\n    {\n      $tmpimage = imagecreatetruecolor($width, $height);\n      imagecopyresampled($tmpimage, $this->img, 0, 0, $x, $y,\n                           $width, $height, $width, $height);\n      imagedestroy($this->img);\n      $this->img = $tmpimage;\n      $this->y = $height;\n      $this->x = $width;\n    }\n  }\n\n  /****************************************************************/\n  // ADDS TEXT TO AN IMAGE, TAKES THE STRING, A STARTING\n  // POINT, PLUS A COLOR DEFINITION AS AN ARRAY IN RGB MODE\n  /****************************************************************/\n  function addText($str, $x, $y, $col)\n  {\n    if(!$this->error)\n    {\n      $colour = ImageColorAllocate($this->img, $col[0], $col[1], $col[2]);\n      Imagestring($this->img, 5, $x, $y, $str, $colour);\n    }\n  }\n\n  /****************************************************************/\n  // ADDS A LINE TO AN IMAGE, TAKES A STARTING AND AN END\n  // POINT, PLUS A COLOR DEFINITION AS AN ARRAY IN RGB MODE\n  /****************************************************************/\n  function addLine($x1, $y1, $x2, $y2, $col)\n  {\n    if(!$this->error)\n    {\n      $colour = ImageColorAllocate($this->img, $col[0], $col[1], $col[2]);\n      ImageLine($this->img, $x1, $y1, $x2, $y2, $colour);\n    }\n  }\n\n  /****************************************************************/\n  // RETURN OUR EDITED FILE AS AN IMAGE\n  /****************************************************************/\n  function outputImage()\n  {\n    if ($this->type == 'jpg' || $this->type == 'jpeg')\n    {\n      header(\"Content-type: image/jpeg\");\n      imagejpeg($this->img);\n    }\n    else if ($this->type == 'png')\n    {\n      header(\"Content-type: image/png\");\n      imagepng($this->img);\n    }\n    else if ($this->type == 'gif')\n    {\n      header(\"Content-type: image/png\");\n      imagegif($this->img);\n    }\n  }\n\n  /****************************************************************/\n  // CREATE OUR EDITED FILE ON THE SERVER\n  /****************************************************************/\n  function outputFile($filename, $path)\n  {\n    if ($this->type == 'jpg' || $this->type == 'jpeg')\n    {\n      imagejpeg($this->img, ($path . $filename));\n    }\n    else if ($this->type == 'png')\n    {\n      imagepng($this->img, ($path . $filename));\n    }\n    else if ($this->type == 'gif')\n    {\n      imagegif($this->img, ($path . $filename));\n    }\n  }\n\n\n  /****************************************************************/\n  // SET OUTPUT TYPE IN ORDER TO SAVE IN DIFFERENT\n  // TYPE THAN WE LOADED\n  /****************************************************************/\n  function setImageType($type)\n  {\n    $this->type = $type;\n  }\n\n  /****************************************************************/\n  // GET VARIABLE FUNCTIONS\n  /****************************************************************/\n  function getWidth()                {return $this->x;}\n  function getHeight()               {return $this->y;}\n  function getImageType()            {return $this->type;}\n\n  /****************************************************************/\n  // CREATES AN ERROR IMAGE SO A PROPER OBJECT IS RETURNED\n  /****************************************************************/\n  function errorImage($str)\n  {\n    $this->error = false;\n    $this->x = 235;\n    $this->y = 50;\n    $this->type = \"jpg\";\n    $this->img = imagecreatetruecolor($this->x, $this->y);\n    $this->addText(\"AN ERROR OCCURED:\", 10, 5, array(250,70,0));\n    $this->addText($str, 10, 30, array(255,255,255));\n    $this->error = true;\n  }\n}\n\n\n/******************************************\n * XML\n ******************************************/\n\n/******************************************\n * Call functions\n * Brian Vaughn, 11/18/2004\n ******************************************/\n\n\t// Parses local XML file or XML URL - Proper form required\n\tfunction xml_parsefile($filepath, $filesize=250000) {\n\t\t$hosts = array(\"http\",\"https\");\n\t\tforeach ($hosts as $find) {\n\t\t\tif (eregi($find,$filepath)) {\n\t\t\t\t$url = $filepath;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If passed is not URL, read local file\n\t\tif (file_exists($filepath) and !$url) {\n\t\t\t$file = fopen($filepath, \"r\");\n\t\t\t$xmlsource = fread($file, filesize($filepath));\n\t\t\tfclose($file);\n\t\t} else {\n\t\t\t// Read URL as XML file (<=250kb)\n\t\t\tif ($url) {\n\t\t\t\t$file = fopen($filepath, \"r\");\n\t\t\t\t$xmlsource = fread($file, $filesize);\n\t\t\t\tfclose($file);\n\t\t\t} else {\n\t\t\t\t// Take direct variable and parse\n\t\t\t\t$xmlsource = $filepath;\n\t\t\t}\n\t\t}\n\n\t\t$xmlarray = XML_unserialize($xmlsource);\n\n\t\treturn($xmlarray);\n\t}\n\n\t// Alias for function xml_parsefile() {\n\tfunction xml_parser($filepath, $filesize=250000) {\n\t\t$array = xml_parsefile($filepath, $filesize);\n\t\treturn($array);\n\t}\n\n\t// Turns array into ready-to-write XML string\n\tfunction array_createxml($array) {\n\t\t$result = XML_serialize($array);\n\n\t\treturn($result);\n\t}\n\n/******************************************\n * An XML-RPC implementation by Keith Devens, version 2.5e.\n * http://www.keithdevens.com/software/xmlrpc/\n *\n * Release history available at:\n * http://www.keithdevens.com/software/xmlrpc/history/\n *\n * This code is Open Source, released under terms similar to the Artistic License.\n * Read the license at http://www.keithdevens.com/software/license/\n *\n * Note: this code requires version 4.1.0 or higher of PHP.\n ******************************************/\n\n/* XML-RPC */\nfunction & XML_serialize(&$data, $level = 0, $prior_key = NULL){\n\t//assumes a hash, keys are the variable names\n\t$xml_serialized_string = \"\";\n\twhile(list($key, $value) = each($data)){\n\t\t$inline = false;\n\t\t$numeric_array = false;\n\t\t$attributes = \"\";\n\t\t//echo \"My current key is '$key', called with prior key '$prior_key'<br>\";\n\t\tif(!strstr($key, \"_attributes\")){ //if it's not an attribute\n\t\t\tif(array_key_exists($key.\"_attributes\", $data)){\n\t\t\t\twhile(list($attr_name, $attr_value) = each($data[$key.\"_attributes\"])){\n\t\t\t\t\t//echo \"Found attribute $attribute_name with value $attribute_value<br>\";\n\t\t\t\t\t$attr_value = &htmlspecialchars($attr_value, ENT_QUOTES);\n\t\t\t\t\t$attributes .= \" $attr_name=\\\"$attr_value\\\"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(is_numeric($key)){\n\t\t\t\t//echo \"My current key ($key) is numeric. My parent key is '$prior_key'<br>\";\n\t\t\t\t$key = $prior_key;\n\t\t\t}else{\n\t\t\t\t//you can't have numeric keys at two levels in a row, so this is ok\n\t\t\t\t//echo \"Checking to see if a numeric key exists in data.\";\n\t\t\t\tif(is_array($value) and array_key_exists(0, $value)){\n\t\t\t\t//\techo \" It does! Calling myself as a result of a numeric array.<br>\";\n\t\t\t\t\t$numeric_array = true;\n\t\t\t\t\t$xml_serialized_string .= XML_serialize($value, $level, $key);\n\t\t\t\t}\n\t\t\t\t//echo \"<br>\";\n\t\t\t}\n\n\t\t\tif(!$numeric_array){\n\t\t\t\t$xml_serialized_string .= str_repeat(\"\\t\", $level) . \"<$key$attributes>\";\n\n\t\t\t\tif(is_array($value)){\n\t\t\t\t\t$xml_serialized_string .= \"\\r\\n\" . XML_serialize($value, $level+1);\n\t\t\t\t}else{\n\t\t\t\t\t$inline = true;\n\t\t\t\t\t$xml_serialized_string .= $value;\n\t\t\t\t}\n\n\t\t\t\t$xml_serialized_string .= (!$inline ? str_repeat(\"\\t\", $level) : \"\") . \"</$key>\\r\\n\";\n\t\t\t}\n\t\t}else{\n\t\t\t//echo \"Skipping attribute record for key $key<bR>\";\n\t\t}\n\t}\n\n\t/*\n\tif($level == 0) {\n\t\t$xml_serialized_string = \"<?xml version=\\\"1.0\\\" ?>\\r\\n\" . $xml_serialized_string;\n\t\treturn($xml_serialized_string);\n\t} else {\n\t\treturn($xml_serialized_string);\n\t}\n\t*/\n\n\treturn($xml_serialized_string);\n}\n\nclass XML {\n\tvar $parser; //a reference to the XML parser\n\tvar $document; //the entire XML structure built up so far\n\tvar $current; //a pointer to the current item - what is this\n\tvar $parent; //a pointer to the current parent - the parent will be an array\n\tvar $parents; //an array of the most recent parent at each level\n\n\tvar $last_opened_tag;\n\n\tfunction XML($data=null){\n\t\t$this->parser = xml_parser_create();\n\n\t\txml_parser_set_option ($this->parser, XML_OPTION_CASE_FOLDING, 0);\n\t\txml_set_object($this->parser, &$this);\n\t\txml_set_element_handler($this->parser, \"open\", \"close\");\n\t\txml_set_character_data_handler($this->parser, \"data\");\n//\t\tregister_shutdown_function(array(&$this, 'destruct'));\n\t}\n\n\tfunction destruct(){\n\t\txml_parser_free($this->parser);\n\t}\n\n\tfunction parse($data){\n\t\t$this->document = array();\n\t\t$this->parent = &$this->document;\n\t\t$this->parents = array();\n\t\t$this->last_opened_tag = NULL;\n\t\txml_parse($this->parser, $data);\n\t\treturn $this->document;\n\t}\n\n\tfunction open($parser, $tag, $attributes){\n\t\t//echo \"Opening tag $tag<br>\\n\";\n\t\t$this->data = \"\";\n\t\t$this->last_opened_tag = $tag; //tag is a string\n\t\tif(array_key_exists($tag, $this->parent)){\n\t\t\t//echo \"There's already an instance of '$tag' at the current level ($level)<br>\\n\";\n\t\t\tif(is_array($this->parent[$tag]) and array_key_exists(0, $this->parent[$tag])){ //if the keys are numeric\n\t\t\t\t//need to make sure they're numeric (account for attributes)\n\t\t\t\t$key = count_numeric_items($this->parent[$tag]);\n\t\t\t\t//echo \"There are $key instances: the keys are numeric.<br>\\n\";\n\t\t\t}else{\n\t\t\t\t//echo \"There is only one instance. Shifting everything around<br>\\n\";\n\t\t\t\t$temp = &$this->parent[$tag];\n\t\t\t\tunset($this->parent[$tag]);\n\t\t\t\t$this->parent[$tag][0] = &$temp;\n\n\t\t\t\tif(array_key_exists($tag.\"_attributes\", $this->parent)){\n\t\t\t\t\t//shift the attributes around too if they exist\n\t\t\t\t\t$temp = &$this->parent[$tag.\"_attributes\"];\n\t\t\t\t\tunset($this->parent[$tag.\"_attributes\"]);\n\t\t\t\t\t$this->parent[$tag][\"0_attributes\"] = &$temp;\n\t\t\t\t}\n\t\t\t\t$key = 1;\n\t\t\t}\n\t\t\t$this->parent = &$this->parent[$tag];\n\t\t}else{\n\t\t\t$key = $tag;\n\t\t}\n\t\tif($attributes){\n\t\t\t$this->parent[$key.\"_attributes\"] = $attributes;\n\t\t}\n\n\t\t$this->parent[$key] = array();\n\t\t$this->parent = &$this->parent[$key];\n\t\tarray_unshift($this->parents, &$this->parent);\n\t}\n\n\tfunction data($parser, $data){\n\t\t//echo \"Data is '\", htmlspecialchars($data), \"'<br>\\n\";\n\t\tif($this->last_opened_tag != NULL){\n\t\t\t$this->data .= $data;\n\t\t}\n\t}\n\n\tfunction close($parser, $tag){\n\t\t//echo \"Close tag $tag<br>\\n\";\n\t\tif($this->last_opened_tag == $tag){\n\t\t\t$this->parent = $this->data;\n\t\t\t$this->last_opened_tag = NULL;\n\t\t}\n\t\tarray_shift($this->parents);\n\t\t$this->parent = &$this->parents[0];\n\t}\n}\n\nfunction & XML_unserialize(&$xml){\n\t$xml_parser = new XML();\n\t$data = &$xml_parser->parse(&$xml);\n\t$xml_parser->destruct();\n\treturn $data;\n}\n\nfunction & XMLRPC_parse(&$request){\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_parse', \"<p>Received the following raw request:</p>\" . XMLRPC_show($request, 'print_r', true));\n\t}\n\t$data = &XML_unserialize(&$request);\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_parse', \"<p>Returning the following parsed request:</p>\" . XMLRPC_show($data, 'print_r', true));\n\t}\n\treturn $data;\n}\n\nfunction & XMLRPC_prepare($data, $type = NULL){\n\tif(is_array($data)){\n\t\t$num_elements = count($data);\n\t\tif((array_key_exists(0, $data) or !$num_elements) and $type != 'struct'){ //it's an array\n\t\t\tif(!$num_elements){ //if the array is empty\n\t\t\t\t$returnvalue =  array('array' => array('data' => NULL));\n\t\t\t}else{\n\t\t\t\t$returnvalue['array']['data']['value'] = array();\n\t\t\t\t$temp = &$returnvalue['array']['data']['value'];\n\t\t\t\t$count = count_numeric_items($data);\n\t\t\t\tfor($n=0; $n<$count; $n++){\n\t\t\t\t\t$type = NULL;\n\t\t\t\t\tif(array_key_exists(\"$n type\", $data)){\n\t\t\t\t\t\t$type = $data[\"$n type\"];\n\t\t\t\t\t}\n\t\t\t\t\t$temp[$n] = XMLRPC_prepare(&$data[$n], $type);\n\t\t\t\t}\n\t\t\t}\n\t\t}else{ //it's a struct\n\t\t\tif(!$num_elements){ //if the struct is empty\n\t\t\t\t$returnvalue = array('struct' => NULL);\n\t\t\t}else{\n\t\t\t\t$returnvalue['struct']['member'] = array();\n\t\t\t\t$temp = &$returnvalue['struct']['member'];\n\t\t\t\twhile(list($key, $value) = each($data)){\n\t\t\t\t\tif(substr($key, -5) != ' type'){ //if it's not a type specifier\n\t\t\t\t\t\t$type = NULL;\n\t\t\t\t\t\tif(array_key_exists(\"$key type\", $data)){\n\t\t\t\t\t\t\t$type = $data[\"$key type\"];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$temp[] = array('name' => $key, 'value' => XMLRPC_prepare(&$value, $type));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else{ //it's a scalar\n\t\tif(!$type){\n\t\t\tif(is_int($data)){\n\t\t\t\t$returnvalue['int'] = $data;\n\t\t\t\treturn $returnvalue;\n\t\t\t}elseif(is_float($data)){\n\t\t\t\t$returnvalue['double'] = $data;\n\t\t\t\treturn $returnvalue;\n\t\t\t}elseif(is_bool($data)){\n\t\t\t\t$returnvalue['boolean'] = ($data ? 1 : 0);\n\t\t\t\treturn $returnvalue;\n\t\t\t}elseif(preg_match('/^\\d{8}T\\d{2}:\\d{2}:\\d{2}$/', $data, $matches)){ //it's a date\n\t\t\t\t$returnvalue['dateTime.iso8601'] = $data;\n\t\t\t\treturn $returnvalue;\n\t\t\t}elseif(is_string($data)){\n\t\t\t\t$returnvalue['string'] = htmlspecialchars($data);\n\t\t\t\treturn $returnvalue;\n\t\t\t}\n\t\t}else{\n\t\t\t$returnvalue[$type] = htmlspecialchars($data);\n\t\t}\n\t}\n\treturn $returnvalue;\n}\n\nfunction & XMLRPC_adjustValue(&$current_node){\n\tif(is_array($current_node)){\n\t\tif(isset($current_node['array'])){\n\t\t\tif(!is_array($current_node['array']['data'])){\n\t\t\t\t//If there are no elements, return an empty array\n\t\t\t\treturn array();\n\t\t\t}else{\n\t\t\t\t//echo \"Getting rid of array -> data -> value<br>\\n\";\n\t\t\t\t$temp = &$current_node['array']['data']['value'];\n\t\t\t\tif(is_array($temp) and array_key_exists(0, $temp)){\n\t\t\t\t\t$count = count($temp);\n\t\t\t\t\tfor($n=0;$n<$count;$n++){\n\t\t\t\t\t\t$temp2[$n] = &XMLRPC_adjustValue(&$temp[$n]);\n\t\t\t\t\t}\n\t\t\t\t\t$temp = &$temp2;\n\t\t\t\t}else{\n\t\t\t\t\t$temp2 = &XMLRPC_adjustValue(&$temp);\n\t\t\t\t\t$temp = array(&$temp2);\n\t\t\t\t\t//I do the temp assignment because it avoids copying,\n\t\t\t\t\t// since I can put a reference in the array\n\t\t\t\t\t//PHP's reference model is a bit silly, and I can't just say:\n\t\t\t\t\t// $temp = array(&XMLRPC_adjustValue(&$temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}elseif(isset($current_node['struct'])){\n\t\t\tif(!is_array($current_node['struct'])){\n\t\t\t\t//If there are no members, return an empty array\n\t\t\t\treturn array();\n\t\t\t}else{\n\t\t\t\t//echo \"Getting rid of struct -> member<br>\\n\";\n\t\t\t\t$temp = &$current_node['struct']['member'];\n\t\t\t\tif(is_array($temp) and array_key_exists(0, $temp)){\n\t\t\t\t\t$count = count($temp);\n\t\t\t\t\tfor($n=0;$n<$count;$n++){\n\t\t\t\t\t\t//echo \"Passing name {$temp[$n][name]}. Value is: \" . show($temp[$n][value], var_dump, true) . \"<br>\\n\";\n\t\t\t\t\t\t$temp2[$temp[$n]['name']] = &XMLRPC_adjustValue(&$temp[$n]['value']);\n\t\t\t\t\t\t//echo \"adjustValue(): After assigning, the value is \" . show($temp2[$temp[$n]['name']], var_dump, true) . \"<br>\\n\";\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t//echo \"Passing name $temp[name]<br>\\n\";\n\t\t\t\t\t$temp2[$temp['name']] = &XMLRPC_adjustValue(&$temp['value']);\n\t\t\t\t}\n\t\t\t\t$temp = &$temp2;\n\t\t\t}\n\t\t}else{\n\t\t\t$types = array('string', 'int', 'i4', 'double', 'dateTime.iso8601', 'base64', 'boolean');\n\t\t\t$fell_through = true;\n\t\t\tforeach($types as $type){\n\t\t\t\tif(array_key_exists($type, $current_node)){\n\t\t\t\t\t//echo \"Getting rid of '$type'<br>\\n\";\n\t\t\t\t\t$temp = &$current_node[$type];\n\t\t\t\t\t//echo \"adjustValue(): The current node is set with a type of $type<br>\\n\";\n\t\t\t\t\t$fell_through = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif($fell_through){\n\t\t\t\t$type = 'string';\n\t\t\t\t//echo \"Fell through! Type is $type<br>\\n\";\n\t\t\t}\n\t\t\tswitch ($type){\n\t\t\t\tcase 'int': case 'i4': $temp = (int)$temp;    break;\n\t\t\t\tcase 'string':         $temp = (string)$temp; break;\n\t\t\t\tcase 'double':         $temp = (double)$temp; break;\n\t\t\t\tcase 'boolean':        $temp = (bool)$temp;   break;\n\t\t\t}\n\t\t}\n\t}else{\n\t\t$temp = (string)$current_node;\n\t}\n\treturn $temp;\n}\n\nfunction XMLRPC_getParams($request){\n\tif(!is_array($request['methodCall']['params'])){\n\t\t//If there are no parameters, return an empty array\n\t\treturn array();\n\t}else{\n\t\t//echo \"Getting rid of methodCall -> params -> param<br>\\n\";\n\t\t$temp = &$request['methodCall']['params']['param'];\n\t\tif(is_array($temp) and array_key_exists(0, $temp)){\n\t\t\t$count = count($temp);\n\t\t\tfor($n = 0; $n < $count; $n++){\n\t\t\t\t//echo \"Serializing parameter $n<br>\";\n\t\t\t\t$temp2[$n] = &XMLRPC_adjustValue(&$temp[$n]['value']);\n\t\t\t}\n\t\t}else{\n\t\t\t$temp2[0] = &XMLRPC_adjustValue($temp['value']);\n\t\t}\n\t\t$temp = &$temp2;\n\t\treturn $temp;\n\t}\n}\n\nfunction XMLRPC_getMethodName($methodCall){\n\t//returns the method name\n\treturn $methodCall['methodCall']['methodName'];\n}\n\nfunction XMLRPC_request($site, $location, $methodName, $params = NULL, $user_agent = NULL){\n\t$site = explode(':', $site);\n\tif(isset($site[1]) and is_numeric($site[1])){\n\t\t$port = $site[1];\n\t}else{\n\t\t$port = 80;\n\t}\n\t$site = $site[0];\n\n\t$data[\"methodCall\"][\"methodName\"] = $methodName;\n\t$param_count = count($params);\n\tif(!$param_count){\n\t\t$data[\"methodCall\"][\"params\"] = NULL;\n\t}else{\n\t\tfor($n = 0; $n<$param_count; $n++){\n\t\t\t$data[\"methodCall\"][\"params\"][\"param\"][$n][\"value\"] = $params[$n];\n\t\t}\n\t}\n\t$data = XML_serialize($data);\n\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_request', \"<p>Received the following parameter list to send:</p>\" . XMLRPC_show($params, 'print_r', true));\n\t}\n\t$conn = fsockopen ($site, $port); //open the connection\n\tif(!$conn){ //if the connection was not opened successfully\n\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Connection failed: Couldn't make the connection to $site.</p>\");\n\t\t}\n\t\treturn array(false, array('faultCode'=>10532, 'faultString'=>\"Connection failed: Couldn't make the connection to $site.\"));\n\t}else{\n\t\t$headers =\n\t\t\t\"POST $location HTTP/1.0\\r\\n\" .\n\t\t\t\"Host: $site\\r\\n\" .\n\t\t\t\"Connection: close\\r\\n\" .\n\t\t\t($user_agent ? \"User-Agent: $user_agent\\r\\n\" : '') .\n\t\t\t\"Content-Type: text/xml\\r\\n\" .\n\t\t\t\"Content-Length: \" . strlen($data) . \"\\r\\n\\r\\n\";\n\n\t\tfputs($conn, \"$headers\");\n\t\tfputs($conn, $data);\n\n\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Sent the following request:</p>\\n\\n\" . XMLRPC_show($headers . $data, 'print_r', true));\n\t\t}\n\n\t\t//socket_set_blocking ($conn, false);\n\t\t$response = \"\";\n\t\twhile(!feof($conn)){\n\t\t\t$response .= fgets($conn, 1024);\n\t\t}\n\t\tfclose($conn);\n\n\t\t//strip headers off of response\n\t\t$data = XML_unserialize(substr($response, strpos($response, \"\\r\\n\\r\\n\")+4));\n\n\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Received the following response:</p>\\n\\n\" . XMLRPC_show($response, 'print_r', true) . \"<p>Which was serialized into the following data:</p>\\n\\n\" . XMLRPC_show($data, 'print_r', true));\n\t\t}\n\t\tif(isset($data['methodResponse']['fault'])){\n\t\t\t$return =  array(false, XMLRPC_adjustValue(&$data['methodResponse']['fault']['value']));\n\t\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Returning:</p>\\n\\n\" . XMLRPC_show($return, 'var_dump', true));\n\t\t\t}\n\t\t\treturn $return;\n\t\t}else{\n\t\t\t$return = array(true, XMLRPC_adjustValue(&$data['methodResponse']['params']['param']['value']));\n\t\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Returning:</p>\\n\\n\" . XMLRPC_show($return, 'var_dump', true));\n\t\t\t}\n\t\t\treturn $return;\n\t\t}\n\t}\n}\n\nfunction XMLRPC_response($return_value, $server = NULL){\n\t$data[\"methodResponse\"][\"params\"][\"param\"][\"value\"] = &$return_value;\n\t$return = XML_serialize(&$data);\n\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_response', \"<p>Received the following data to return:</p>\\n\\n\" . XMLRPC_show($return_value, 'print_r', true));\n\t}\n\n\theader(\"Connection: close\");\n\theader(\"Content-Length: \" . strlen($return));\n\theader(\"Content-Type: text/xml\");\n\theader(\"Date: \" . date(\"r\"));\n\tif($server){\n\t\theader(\"Server: $server\");\n\t}\n\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_response', \"<p>Sent the following response:</p>\\n\\n\" . XMLRPC_show($return, 'print_r', true));\n\t}\n\techo $return;\n}\n\nfunction XMLRPC_error($faultCode, $faultString, $server = NULL){\n\t$array[\"methodResponse\"][\"fault\"][\"value\"][\"struct\"][\"member\"] = array();\n\t$temp = &$array[\"methodResponse\"][\"fault\"][\"value\"][\"struct\"][\"member\"];\n\t$temp[0][\"name\"] = \"faultCode\";\n\t$temp[0][\"value\"][\"int\"] = $faultCode;\n\t$temp[1][\"name\"] = \"faultString\";\n\t$temp[1][\"value\"][\"string\"] = $faultString;\n\n\t$return = XML_serialize($array);\n\n\theader(\"Connection: close\");\n\theader(\"Content-Length: \" . strlen($return));\n\theader(\"Content-Type: text/xml\");\n\theader(\"Date: \" . date(\"r\"));\n\tif($server){\n\t\theader(\"Server: $server\");\n\t}\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_error', \"<p>Sent the following error response:</p>\\n\\n\" . XMLRPC_show($return, 'print_r', true));\n\t}\n\techo $return;\n}\n\nfunction XMLRPC_convert_timestamp_to_iso8601($timestamp){\n\t//takes a unix timestamp and converts it to iso8601 required by XMLRPC\n\t//an example iso8601 datetime is \"20010822T03:14:33\"\n\treturn date(\"Ymd\\TH:i:s\", $timestamp);\n}\n\nfunction XMLRPC_convert_iso8601_to_timestamp($iso8601){\n\treturn strtotime($iso8601);\n}\n\nfunction count_numeric_items(&$array){\n\treturn is_array($array) ? count(array_filter(array_keys($array), 'is_numeric')) : 0;\n}\n\nfunction XMLRPC_debug($function_name, $debug_message){\n\t$GLOBALS['XMLRPC_DEBUG_INFO'][] = array($function_name, $debug_message);\n}\n\nfunction XMLRPC_debug_print(){\n\tif($GLOBALS['XMLRPC_DEBUG_INFO']){\n\t\techo \"<table border=\\\"1\\\" width=\\\"100%\\\">\\n\";\n\t\tforeach($GLOBALS['XMLRPC_DEBUG_INFO'] as $debug){\n\t\t\techo \"<tr><th style=\\\"vertical-align: top\\\">$debug[0]</th><td>$debug[1]</td></tr>\\n\";\n\t\t}\n\t\techo \"</table>\\n\";\n\t\tunset($GLOBALS['XMLRPC_DEBUG_INFO']);\n\t}else{\n\t\techo \"<p>No debugging information available yet.</p>\";\n\t}\n}\n\nfunction XMLRPC_show($data, $func = \"print_r\", $return_str = false){\n\tob_start();\n\t$func($data);\n\t$output = ob_get_contents();\n\tob_end_clean();\n\tif($return_str){\n\t\treturn \"<pre>\" . htmlspecialchars($output) . \"</pre>\\n\";\n\t}else{\n\t\techo \"<pre>\", htmlspecialchars($output), \"</pre>\\n\";\n\t}\n}\n\n?>"]],"start1":0,"start2":0,"length1":0,"length2":55026}]],"length":55026}
{"contributors":[],"silentsave":false,"ts":1345040806880,"patch":[[{"diffs":[[0,"\t}\n\n"],[-1,"/******************************************\n * Image manipulations (GD library)\n ******************************************/\n\n/******************************************\n * Call functions\n * Brian Vaughn, 11/18/2004\n ******************************************/\n\n\t/**\n\t* Get thumbnail dimensions for an image\n\t*\n\t* Takes the original dimensions of the named image file and calculates the correct proportions for the resized image.\n\t* Use this function for thumbnails and force fitting images that may be too large.\n\t* Note: This function does not create image files. Use it to get dimensions to resize an image use HTML.\n\t*\n\t* If you provide a maximum height greather than zero, the function continue to calculate dimensions until it is below the maximum height.\n\t* This means the final width may be smaller than the maximum width desired.\n\t*\n\t* Returned array has the following keys and values:\n\t* - height, integer of height\n\t* - width, integer of width\n\t* @param string $imgpath Absolute path to the image file\n\t* @param int $maxwidth Maximum width of the resized dimensions\n\t* @param int $maxheight Maximum height of the resized dimensions\n\t* @return array Associative array contain the dimensions. See comments for structure.\n\t*/\n\tfunction image_resizedimensions($imgpath,$maxwidth=\"125\",$maxheight=\"0\") {\n\t\t$imagehw     = image_getsize($imgpath);\n\t\t$imagewidth  = $imagehw[\"width\"];\n\t\t$imageheight = $imagehw[\"height\"];\n\t\t$imgorig     = $imagewidth;\n\n\t\tif ($imagewidth > $maxwidth) {\n\t\t\t$imageprop   = ($maxwidth*100)/$imagewidth;\n\t\t\t$imagevsize  = ($imageheight*$imageprop)/100;\n\t\t\t$imagewidth  = $maxwidth;\n\t\t\t$imageheight = ceil($imagevsize);\n\t\t}\n\n\t\twhile (($imageheight > $maxheight) and ($maxheight > 0)) {\n\t\t\t$maxwidth = $maxwidth - 5;\n\n\t\t\tif ($imagewidth > $maxwidth) {\n\t\t\t\t$imageprop   = ($maxwidth*100)/$imagewidth;\n\t\t\t\t$imagevsize  = ($imageheight*$imageprop)/100;\n\t\t\t\t$imagewidth  = $maxwidth;\n\t\t\t\t$imageheight = ceil($imagevsize);\n\t\t\t}\n\t\t}\n\n\t\t$thumbnail = array(\n\t\t\t\t\t\t\t\"height\" => $imageheight,\n\t\t\t\t\t\t\t\"width\"  => $imagewidth\n\t\t\t\t\t\t);\n\t\treturn($thumbnail);\n\t}\n\n\t// Resize an image and display\n\tfunction image_resizeX($path, $saveas=FALSE, $newwidth, $newheight=\"0\") {\n\t\t$filename = basename($path);\n\t\t$filepath = dirname($path);\n\n\t\t$newsize = image_resizedimensions($filepath.\"/\".$filename,$newwidth,$newheight);\n\n\t\t$gd = new ImageEditor($filename, $filepath);\n\t\t$gd->resize($newsize[\"width\"], $newsize[\"height\"]);\n\n\t\tif ($saveas) {\n\t\t\t$savename = basename($saveas);\n\t\t\t$savepath = dirname($saveas).\"/\";\n\n\t\t\t$gd->outputFile($savename, $savepath);\n\t\t} else {\n\t\t\t$gd->outputImage();\n\t\t}\n\n\t\treturn;\n\t}\n\n\n\t/**\n\t* Get image dimensions\n\t*\n\t* Returns an array of image dimensions in pixels. This is a alternate call for GetImageSize()\n\t* This function checks for existing file before attempting native function call.\n\t*\n\t* Returned array has the following keys and values:\n\t* - height, integer of height\n\t* - width, integer of width\n\t* @param string $path Absolute path to the image file\n\t* @return array Associative array contain the dimensions. See comments for structure.\n\t*/\n\tfunction image_getsize($path) {\n\t\t$imgsize = array();\n\n\t\tif (file_exists($path)) {\n\t\t\t$imagehw           = GetImageSize($path);\n\t\t\t$imgsize[\"width\"]  = $imagehw[0];\n\t\t\t$imgsize[\"height\"] = $imagehw[1];\n\t\t}\n\n\t\treturn($imgsize);\n\t}\n\n/******************************************\n *  Script Info\n *  ===========\n *  File: ImageEditor.php\n *  Created: 05/06/03\n *  Modified: 05/06/03\n *  Author: Ash Young (ash@evoluted.net\n *  Website: http: * evoluted.net/php/image-editor.htm\n *  Requirements: PHP with the GD Library\n * Description\n *  ===========\n *  This class allows you to edit an image easily and\n *  quickly via php.\n * If you have any functions that you like to see\n *  implemented in this script then please just send\n *  an email to ash@evoluted.net\n * Limitations\n *  ===========\n *  - GIF Editing: this script will only edit gif files\n *      your GD library allows this.\n * Image Editing Functions\n *  =======================\n *  resize(int width, int height)\n *     resizes the image to proportions specified.\n * crop(int x, int y, int width, int height)\n *     crops the image starting at (x, y) into a rectangle\n *     width wide and height high.\n * addText(String str, int x, int y, Array color)\n *     adds the string str to the image at position (x, y)\n *     using the colour given in the Array color which\n *     represents colour in RGB mode.\n * addLine(int x1, int y1, int x2, int y2, Array color)\n *     adds the line starting at (x1,y1) ending at (x2,y2)\n *     using the colour given in the Array color which\n *     represents colour in RGB mode.\n * Useage\n *  ======\n *  First you are required to include this file into your\n *  php script and then to create a new instance of the\n *  class, giving it the path and the filename of the\n *  image that you wish to edit. Like so:\n * include(\"ImageEditor.php\");\n *  $imageEditor = new ImageEditor(\"filename.jpg\", \"directoryfileisin/\");\n * After you have done this you will be able to edit the\n *  image easily and quickly. You do this by calling a\n *  function to act upon the image. See below for function\n *  definitions and descriptions see above. An example\n *  would be:\n * $imageEditor->resize(400, 300);\n * This would resize our imported image to 400 pixels by\n *  300 pixels. To then export the edited image there are\n *  two choices, out put to file and to display as an image.\n *  If you are displaying as an image however it is assumed\n *  that this file will be viewed as an image rather than\n *  as a webpage. The first line below saves to file, the\n *  second displays the image.\n * $imageEditor->outputFile(\"filenametosaveto.jpg\", \"directorytosavein/\");\n * $imageEditor->outputImage();\n/****************************************************************/\n\nclass ImageEditor {\n  var $x;\n  var $y;\n  var $type;\n  var $img;\n  var $error;\n\n  /****************************************************************/\n  // CONSTRUCTOR\n  /****************************************************************/\n  function ImageEditor($filename, $path, $col=NULL)\n  {\n    $this->error = false;\n    if(is_numeric($filename) && is_numeric($path))\n    // IF NO IMAGE SPECIFIED CREATE BLANK IMAGE\n    {\n      $this->x = $filename;\n      $this->y = $path;\n      $this->type = \"jpg\";\n      $this->img = imagecreatetruecolor($this->x, $this->y);\n      if(is_array($col))\n      // SET BACKGROUND COLOUR OF IMAGE\n      {\n        $colour = ImageColorAllocate($this->img, $col[0], $col[1], $col[2]);\n        ImageFill($this->img, 0, 0, $colour);\n      }\n    }\n    else\n    // IMAGE SPECIFIED SO LOAD THIS IMAGE\n    {\n      // FIRST SEE IF WE CAN FIND IMAGE\n\n      if(file_exists($path . $filename))\n      {\n        $file = $path . $filename;\n      }\n      else if (file_exists($path . \"/\" . $filename))\n      {\n        $file = $path . \"/\" . $filename;\n      }\n      else\n      {\n        $this->errorImage(\"File Could Not Be Loaded\");\n      }\n\n      if(!($this->error))\n      {\n        // LOAD OUR IMAGE WITH CORRECT FUNCTION\n        $this->type = strtolower(end(explode('.', $filename)));\n        if ($this->type == 'jpg' || $this->type == 'jpeg')\n        {\n          $this->img = @imagecreatefromjpeg($file);\n        }\n        else if ($this->type == 'png')\n        {\n          $this->img = @imagecreatefrompng($file);\n        }\n        else if ($this->type == 'gif')\n        {\n          $this->img = @imagecreatefrompng($file);\n        }\n        // SET OUR IMAGE VARIABLES\n        $this->x = imagesx($this->img);\n        $this->y = imagesy($this->img);\n      }\n    }\n  }\n\n  /****************************************************************/\n  // RESIZE IMAGE GIVEN X AND Y\n  /****************************************************************/\n  function resize($width, $height)\n  {\n    if(!$this->error)\n    {\n      $tmpimage = imagecreatetruecolor($width, $height);\n      imagecopyresampled($tmpimage, $this->img, 0, 0, 0, 0,\n                           $width, $height, $this->x, $this->y);\n      imagedestroy($this->img);\n      $this->img = $tmpimage;\n      $this->y = $height;\n      $this->x = $width;\n    }\n  }\n\n  /****************************************************************/\n  // CROPS THE IMAGE, GIVE A START CO-ORDINATE AND\n  // LENGTH AND HEIGHT ATTRIBUTES\n  /****************************************************************/\n  function crop($x, $y, $width, $height)\n  {\n    if(!$this->error)\n    {\n      $tmpimage = imagecreatetruecolor($width, $height);\n      imagecopyresampled($tmpimage, $this->img, 0, 0, $x, $y,\n                           $width, $height, $width, $height);\n      imagedestroy($this->img);\n      $this->img = $tmpimage;\n      $this->y = $height;\n      $this->x = $width;\n    }\n  }\n\n  /****************************************************************/\n  // ADDS TEXT TO AN IMAGE, TAKES THE STRING, A STARTING\n  // POINT, PLUS A COLOR DEFINITION AS AN ARRAY IN RGB MODE\n  /****************************************************************/\n  function addText($str, $x, $y, $col)\n  {\n    if(!$this->error)\n    {\n      $colour = ImageColorAllocate($this->img, $col[0], $col[1], $col[2]);\n      Imagestring($this->img, 5, $x, $y, $str, $colour);\n    }\n  }\n\n  /****************************************************************/\n  // ADDS A LINE TO AN IMAGE, TAKES A STARTING AND AN END\n  // POINT, PLUS A COLOR DEFINITION AS AN ARRAY IN RGB MODE\n  /****************************************************************/\n  function addLine($x1, $y1, $x2, $y2, $col)\n  {\n    if(!$this->error)\n    {\n      $colour = ImageColorAllocate($this->img, $col[0], $col[1], $col[2]);\n      ImageLine($this->img, $x1, $y1, $x2, $y2, $colour);\n    }\n  }\n\n  /****************************************************************/\n  // RETURN OUR EDITED FILE AS AN IMAGE\n  /****************************************************************/\n  function outputImage()\n  {\n    if ($this->type == 'jpg' || $this->type == 'jpeg')\n    {\n      header(\"Content-type: image/jpeg\");\n      imagejpeg($this->img);\n    }\n    else if ($this->type == 'png')\n    {\n      header(\"Content-type: image/png\");\n      imagepng($this->img);\n    }\n    else if ($this->type == 'gif')\n    {\n      header(\"Content-type: image/png\");\n      imagegif($this->img);\n    }\n  }\n\n  /****************************************************************/\n  // CREATE OUR EDITED FILE ON THE SERVER\n  /****************************************************************/\n  function outputFile($filename, $path)\n  {\n    if ($this->type == 'jpg' || $this->type == 'jpeg')\n    {\n      imagejpeg($this->img, ($path . $filename));\n    }\n    else if ($this->type == 'png')\n    {\n      imagepng($this->img, ($path . $filename));\n    }\n    else if ($this->type == 'gif')\n    {\n      imagegif($this->img, ($path . $filename));\n    }\n  }\n\n\n  /****************************************************************/\n  // SET OUTPUT TYPE IN ORDER TO SAVE IN DIFFERENT\n  // TYPE THAN WE LOADED\n  /****************************************************************/\n  function setImageType($type)\n  {\n    $this->type = $type;\n  }\n\n  /****************************************************************/\n  // GET VARIABLE FUNCTIONS\n  /****************************************************************/\n  function getWidth()                {return $this->x;}\n  function getHeight()               {return $this->y;}\n  function getImageType()            {return $this->type;}\n\n  /****************************************************************/\n  // CREATES AN ERROR IMAGE SO A PROPER OBJECT IS RETURNED\n  /****************************************************************/\n  function errorImage($str)\n  {\n    $this->error = false;\n    $this->x = 235;\n    $this->y = 50;\n    $this->type = \"jpg\";\n    $this->img = imagecreatetruecolor($this->x, $this->y);\n    $this->addText(\"AN ERROR OCCURED:\", 10, 5, array(250,70,0));\n    $this->addText($str, 10, 30, array(255,255,255));\n    $this->error = true;\n  }\n}\n\n\n/******************************************\n * XML\n ******************************************/\n\n/******************************************\n * Call functions\n * Brian Vaughn, 11/18/2004\n ******************************************/\n\n\t// Parses local XML file or XML URL - Proper form required\n\tfunction xml_parsefile($filepath, $filesize=250000) {\n\t\t$hosts = array(\"http\",\"https\");\n\t\tforeach ($hosts as $find) {\n\t\t\tif (eregi($find,$filepath)) {\n\t\t\t\t$url = $filepath;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If passed is not URL, read local file\n\t\tif (file_exists($filepath) and !$url) {\n\t\t\t$file = fopen($filepath, \"r\");\n\t\t\t$xmlsource = fread($file, filesize($filepath));\n\t\t\tfclose($file);\n\t\t} else {\n\t\t\t// Read URL as XML file (<=250kb)\n\t\t\tif ($url) {\n\t\t\t\t$file = fopen($filepath, \"r\");\n\t\t\t\t$xmlsource = fread($file, $filesize);\n\t\t\t\tfclose($file);\n\t\t\t} else {\n\t\t\t\t// Take direct variable and parse\n\t\t\t\t$xmlsource = $filepath;\n\t\t\t}\n\t\t}\n\n\t\t$xmlarray = XML_unserialize($xmlsource);\n\n\t\treturn($xmlarray);\n\t}\n\n\t// Alias for function xml_parsefile() {\n\tfunction xml_parser($filepath, $filesize=250000) {\n\t\t$array = xml_parsefile($filepath, $filesize);\n\t\treturn($array);\n\t}\n\n\t// Turns array into ready-to-write XML string\n\tfunction array_createxml($array) {\n\t\t$result = XML_serialize($array);\n\n\t\treturn($result);\n\t}\n\n/******************************************\n * An XML-RPC implementation by Keith Devens, version 2.5e.\n * http://www.keithdevens.com/software/xmlrpc/\n *\n * Release history available at:\n * http://www.keithdevens.com/software/xmlrpc/history/\n *\n * This code is Open Source, released under terms similar to the Artistic License.\n * Read the license at http://www.keithdevens.com/software/license/\n *\n * Note: this code requires version 4.1.0 or higher of PHP.\n ******************************************/\n\n/* XML-RPC */\nfunction & XML_serialize(&$data, $level = 0, $prior_key = NULL){\n\t//assumes a hash, keys are the variable names\n\t$xml_serialized_string = \"\";\n\twhile(list($key, $value) = each($data)){\n\t\t$inline = false;\n\t\t$numeric_array = false;\n\t\t$attributes = \"\";\n\t\t//echo \"My current key is '$key', called with prior key '$prior_key'<br>\";\n\t\tif(!strstr($key, \"_attributes\")){ //if it's not an attribute\n\t\t\tif(array_key_exists($key.\"_attributes\", $data)){\n\t\t\t\twhile(list($attr_name, $attr_value) = each($data[$key.\"_attributes\"])){\n\t\t\t\t\t//echo \"Found attribute $attribute_name with value $attribute_value<br>\";\n\t\t\t\t\t$attr_value = &htmlspecialchars($attr_value, ENT_QUOTES);\n\t\t\t\t\t$attributes .= \" $attr_name=\\\"$attr_value\\\"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(is_numeric($key)){\n\t\t\t\t//echo \"My current key ($key) is numeric. My parent key is '$prior_key'<br>\";\n\t\t\t\t$key = $prior_key;\n\t\t\t}else{\n\t\t\t\t//you can't have numeric keys at two levels in a row, so this is ok\n\t\t\t\t//echo \"Checking to see if a numeric key exists in data.\";\n\t\t\t\tif(is_array($value) and array_key_exists(0, $value)){\n\t\t\t\t//\techo \" It does! Calling myself as a result of a numeric array.<br>\";\n\t\t\t\t\t$numeric_array = true;\n\t\t\t\t\t$xml_serialized_string .= XML_serialize($value, $level, $key);\n\t\t\t\t}\n\t\t\t\t//echo \"<br>\";\n\t\t\t}\n\n\t\t\tif(!$numeric_array){\n\t\t\t\t$xml_serialized_string .= str_repeat(\"\\t\", $level) . \"<$key$attributes>\";\n\n\t\t\t\tif(is_array($value)){\n\t\t\t\t\t$xml_serialized_string .= \"\\r\\n\" . XML_serialize($value, $level+1);\n\t\t\t\t}else{\n\t\t\t\t\t$inline = true;\n\t\t\t\t\t$xml_serialized_string .= $value;\n\t\t\t\t}\n\n\t\t\t\t$xml_serialized_string .= (!$inline ? str_repeat(\"\\t\", $level) : \"\") . \"</$key>\\r\\n\";\n\t\t\t}\n\t\t}else{\n\t\t\t//echo \"Skipping attribute record for key $key<bR>\";\n\t\t}\n\t}\n\n\t/*\n\tif($level == 0) {\n\t\t$xml_serialized_string = \"<?xml version=\\\"1.0\\\" ?>\\r\\n\" . $xml_serialized_string;\n\t\treturn($xml_serialized_string);\n\t} else {\n\t\treturn($xml_serialized_string);\n\t}\n\t*/\n\n\treturn($xml_serialized_string);\n}\n\nclass XML {\n\tvar $parser; //a reference to the XML parser\n\tvar $document; //the entire XML structure built up so far\n\tvar $current; //a pointer to the current item - what is this\n\tvar $parent; //a pointer to the current parent - the parent will be an array\n\tvar $parents; //an array of the most recent parent at each level\n\n\tvar $last_opened_tag;\n\n\tfunction XML($data=null){\n\t\t$this->parser = xml_parser_create();\n\n\t\txml_parser_set_option ($this->parser, XML_OPTION_CASE_FOLDING, 0);\n\t\txml_set_object($this->parser, &$this);\n\t\txml_set_element_handler($this->parser, \"open\", \"close\");\n\t\txml_set_character_data_handler($this->parser, \"data\");\n//\t\tregister_shutdown_function(array(&$this, 'destruct'));\n\t}\n\n\tfunction destruct(){\n\t\txml_parser_free($this->parser);\n\t}\n\n\tfunction parse($data){\n\t\t$this->document = array();\n\t\t$this->parent = &$this->document;\n\t\t$this->parents = array();\n\t\t$this->last_opened_tag = NULL;\n\t\txml_parse($this->parser, $data);\n\t\treturn $this->document;\n\t}\n\n\tfunction open($parser, $tag, $attributes){\n\t\t//echo \"Opening tag $tag<br>\\n\";\n\t\t$this->data = \"\";\n\t\t$this->last_opened_tag = $tag; //tag is a string\n\t\tif(array_key_exists($tag, $this->parent)){\n\t\t\t//echo \"There's already an instance of '$tag' at the current level ($level)<br>\\n\";\n\t\t\tif(is_array($this->parent[$tag]) and array_key_exists(0, $this->parent[$tag])){ //if the keys are numeric\n\t\t\t\t//need to make sure they're numeric (account for attributes)\n\t\t\t\t$key = count_numeric_items($this->parent[$tag]);\n\t\t\t\t//echo \"There are $key instances: the keys are numeric.<br>\\n\";\n\t\t\t}else{\n\t\t\t\t//echo \"There is only one instance. Shifting everything around<br>\\n\";\n\t\t\t\t$temp = &$this->parent[$tag];\n\t\t\t\tunset($this->parent[$tag]);\n\t\t\t\t$this->parent[$tag][0] = &$temp;\n\n\t\t\t\tif(array_key_exists($tag.\"_attributes\", $this->parent)){\n\t\t\t\t\t//shift the attributes around too if they exist\n\t\t\t\t\t$temp = &$this->parent[$tag.\"_attributes\"];\n\t\t\t\t\tunset($this->parent[$tag.\"_attributes\"]);\n\t\t\t\t\t$this->parent[$tag][\"0_attributes\"] = &$temp;\n\t\t\t\t}\n\t\t\t\t$key = 1;\n\t\t\t}\n\t\t\t$this->parent = &$this->parent[$tag];\n\t\t}else{\n\t\t\t$key = $tag;\n\t\t}\n\t\tif($attributes){\n\t\t\t$this->parent[$key.\"_attributes\"] = $attributes;\n\t\t}\n\n\t\t$this->parent[$key] = array();\n\t\t$this->parent = &$this->parent[$key];\n\t\tarray_unshift($this->parents, &$this->parent);\n\t}\n\n\tfunction data($parser, $data){\n\t\t//echo \"Data is '\", htmlspecialchars($data), \"'<br>\\n\";\n\t\tif($this->last_opened_tag != NULL){\n\t\t\t$this->data .= $data;\n\t\t}\n\t}\n\n\tfunction close($parser, $tag){\n\t\t//echo \"Close tag $tag<br>\\n\";\n\t\tif($this->last_opened_tag == $tag){\n\t\t\t$this->parent = $this->data;\n\t\t\t$this->last_opened_tag = NULL;\n\t\t}\n\t\tarray_shift($this->parents);\n\t\t$this->parent = &$this->parents[0];\n\t}\n}\n\nfunction & XML_unserialize(&$xml){\n\t$xml_parser = new XML();\n\t$data = &$xml_parser->parse(&$xml);\n\t$xml_parser->destruct();\n\treturn $data;\n}\n\nfunction & XMLRPC_parse(&$request){\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_parse', \"<p>Received the following raw request:</p>\" . XMLRPC_show($request, 'print_r', true));\n\t}\n\t$data = &XML_unserialize(&$request);\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_parse', \"<p>Returning the following parsed request:</p>\" . XMLRPC_show($data, 'print_r', true));\n\t}\n\treturn $data;\n}\n\nfunction & XMLRPC_prepare($data, $type = NULL){\n\tif(is_array($data)){\n\t\t$num_elements = count($data);\n\t\tif((array_key_exists(0, $data) or !$num_elements) and $type != 'struct'){ //it's an array\n\t\t\tif(!$num_elements){ //if the array is empty\n\t\t\t\t$returnvalue =  array('array' => array('data' => NULL));\n\t\t\t}else{\n\t\t\t\t$returnvalue['array']['data']['value'] = array();\n\t\t\t\t$temp = &$returnvalue['array']['data']['value'];\n\t\t\t\t$count = count_numeric_items($data);\n\t\t\t\tfor($n=0; $n<$count; $n++){\n\t\t\t\t\t$type = NULL;\n\t\t\t\t\tif(array_key_exists(\"$n type\", $data)){\n\t\t\t\t\t\t$type = $data[\"$n type\"];\n\t\t\t\t\t}\n\t\t\t\t\t$temp[$n] = XMLRPC_prepare(&$data[$n], $type);\n\t\t\t\t}\n\t\t\t}\n\t\t}else{ //it's a struct\n\t\t\tif(!$num_elements){ //if the struct is empty\n\t\t\t\t$returnvalue = array('struct' => NULL);\n\t\t\t}else{\n\t\t\t\t$returnvalue['struct']['member'] = array();\n\t\t\t\t$temp = &$returnvalue['struct']['member'];\n\t\t\t\twhile(list($key, $value) = each($data)){\n\t\t\t\t\tif(substr($key, -5) != ' type'){ //if it's not a type specifier\n\t\t\t\t\t\t$type = NULL;\n\t\t\t\t\t\tif(array_key_exists(\"$key type\", $data)){\n\t\t\t\t\t\t\t$type = $data[\"$key type\"];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$temp[] = array('name' => $key, 'value' => XMLRPC_prepare(&$value, $type));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else{ //it's a scalar\n\t\tif(!$type){\n\t\t\tif(is_int($data)){\n\t\t\t\t$returnvalue['int'] = $data;\n\t\t\t\treturn $returnvalue;\n\t\t\t}elseif(is_float($data)){\n\t\t\t\t$returnvalue['double'] = $data;\n\t\t\t\treturn $returnvalue;\n\t\t\t}elseif(is_bool($data)){\n\t\t\t\t$returnvalue['boolean'] = ($data ? 1 : 0);\n\t\t\t\treturn $returnvalue;\n\t\t\t}elseif(preg_match('/^\\d{8}T\\d{2}:\\d{2}:\\d{2}$/', $data, $matches)){ //it's a date\n\t\t\t\t$returnvalue['dateTime.iso8601'] = $data;\n\t\t\t\treturn $returnvalue;\n\t\t\t}elseif(is_string($data)){\n\t\t\t\t$returnvalue['string'] = htmlspecialchars($data);\n\t\t\t\treturn $returnvalue;\n\t\t\t}\n\t\t}else{\n\t\t\t$returnvalue[$type] = htmlspecialchars($data);\n\t\t}\n\t}\n\treturn $returnvalue;\n}\n\nfunction & XMLRPC_adjustValue(&$current_node){\n\tif(is_array($current_node)){\n\t\tif(isset($current_node['array'])){\n\t\t\tif(!is_array($current_node['array']['data'])){\n\t\t\t\t//If there are no elements, return an empty array\n\t\t\t\treturn array();\n\t\t\t}else{\n\t\t\t\t//echo \"Getting rid of array -> data -> value<br>\\n\";\n\t\t\t\t$temp = &$current_node['array']['data']['value'];\n\t\t\t\tif(is_array($temp) and array_key_exists(0, $temp)){\n\t\t\t\t\t$count = count($temp);\n\t\t\t\t\tfor($n=0;$n<$count;$n++){\n\t\t\t\t\t\t$temp2[$n] = &XMLRPC_adjustValue(&$temp[$n]);\n\t\t\t\t\t}\n\t\t\t\t\t$temp = &$temp2;\n\t\t\t\t}else{\n\t\t\t\t\t$temp2 = &XMLRPC_adjustValue(&$temp);\n\t\t\t\t\t$temp = array(&$temp2);\n\t\t\t\t\t//I do the temp assignment because it avoids copying,\n\t\t\t\t\t// since I can put a reference in the array\n\t\t\t\t\t//PHP's reference model is a bit silly, and I can't just say:\n\t\t\t\t\t// $temp = array(&XMLRPC_adjustValue(&$temp));\n\t\t\t\t}\n\t\t\t}\n\t\t}elseif(isset($current_node['struct'])){\n\t\t\tif(!is_array($current_node['struct'])){\n\t\t\t\t//If there are no members, return an empty array\n\t\t\t\treturn array();\n\t\t\t}else{\n\t\t\t\t//echo \"Getting rid of struct -> member<br>\\n\";\n\t\t\t\t$temp = &$current_node['struct']['member'];\n\t\t\t\tif(is_array($temp) and array_key_exists(0, $temp)){\n\t\t\t\t\t$count = count($temp);\n\t\t\t\t\tfor($n=0;$n<$count;$n++){\n\t\t\t\t\t\t//echo \"Passing name {$temp[$n][name]}. Value is: \" . show($temp[$n][value], var_dump, true) . \"<br>\\n\";\n\t\t\t\t\t\t$temp2[$temp[$n]['name']] = &XMLRPC_adjustValue(&$temp[$n]['value']);\n\t\t\t\t\t\t//echo \"adjustValue(): After assigning, the value is \" . show($temp2[$temp[$n]['name']], var_dump, true) . \"<br>\\n\";\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t//echo \"Passing name $temp[name]<br>\\n\";\n\t\t\t\t\t$temp2[$temp['name']] = &XMLRPC_adjustValue(&$temp['value']);\n\t\t\t\t}\n\t\t\t\t$temp = &$temp2;\n\t\t\t}\n\t\t}else{\n\t\t\t$types = array('string', 'int', 'i4', 'double', 'dateTime.iso8601', 'base64', 'boolean');\n\t\t\t$fell_through = true;\n\t\t\tforeach($types as $type){\n\t\t\t\tif(array_key_exists($type, $current_node)){\n\t\t\t\t\t//echo \"Getting rid of '$type'<br>\\n\";\n\t\t\t\t\t$temp = &$current_node[$type];\n\t\t\t\t\t//echo \"adjustValue(): The current node is set with a type of $type<br>\\n\";\n\t\t\t\t\t$fell_through = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif($fell_through){\n\t\t\t\t$type = 'string';\n\t\t\t\t//echo \"Fell through! Type is $type<br>\\n\";\n\t\t\t}\n\t\t\tswitch ($type){\n\t\t\t\tcase 'int': case 'i4': $temp = (int)$temp;    break;\n\t\t\t\tcase 'string':         $temp = (string)$temp; break;\n\t\t\t\tcase 'double':         $temp = (double)$temp; break;\n\t\t\t\tcase 'boolean':        $temp = (bool)$temp;   break;\n\t\t\t}\n\t\t}\n\t}else{\n\t\t$temp = (string)$current_node;\n\t}\n\treturn $temp;\n}\n\nfunction XMLRPC_getParams($request){\n\tif(!is_array($request['methodCall']['params'])){\n\t\t//If there are no parameters, return an empty array\n\t\treturn array();\n\t}else{\n\t\t//echo \"Getting rid of methodCall -> params -> param<br>\\n\";\n\t\t$temp = &$request['methodCall']['params']['param'];\n\t\tif(is_array($temp) and array_key_exists(0, $temp)){\n\t\t\t$count = count($temp);\n\t\t\tfor($n = 0; $n < $count; $n++){\n\t\t\t\t//echo \"Serializing parameter $n<br>\";\n\t\t\t\t$temp2[$n] = &XMLRPC_adjustValue(&$temp[$n]['value']);\n\t\t\t}\n\t\t}else{\n\t\t\t$temp2[0] = &XMLRPC_adjustValue($temp['value']);\n\t\t}\n\t\t$temp = &$temp2;\n\t\treturn $temp;\n\t}\n}\n\nfunction XMLRPC_getMethodName($methodCall){\n\t//returns the method name\n\treturn $methodCall['methodCall']['methodName'];\n}\n\nfunction XMLRPC_request($site, $location, $methodName, $params = NULL, $user_agent = NULL){\n\t$site = explode(':', $site);\n\tif(isset($site[1]) and is_numeric($site[1])){\n\t\t$port = $site[1];\n\t}else{\n\t\t$port = 80;\n\t}\n\t$site = $site[0];\n\n\t$data[\"methodCall\"][\"methodName\"] = $methodName;\n\t$param_count = count($params);\n\tif(!$param_count){\n\t\t$data[\"methodCall\"][\"params\"] = NULL;\n\t}else{\n\t\tfor($n = 0; $n<$param_count; $n++){\n\t\t\t$data[\"methodCall\"][\"params\"][\"param\"][$n][\"value\"] = $params[$n];\n\t\t}\n\t}\n\t$data = XML_serialize($data);\n\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_request', \"<p>Received the following parameter list to send:</p>\" . XMLRPC_show($params, 'print_r', true));\n\t}\n\t$conn = fsockopen ($site, $port); //open the connection\n\tif(!$conn){ //if the connection was not opened successfully\n\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Connection failed: Couldn't make the connection to $site.</p>\");\n\t\t}\n\t\treturn array(false, array('faultCode'=>10532, 'faultString'=>\"Connection failed: Couldn't make the connection to $site.\"));\n\t}else{\n\t\t$headers =\n\t\t\t\"POST $location HTTP/1.0\\r\\n\" .\n\t\t\t\"Host: $site\\r\\n\" .\n\t\t\t\"Connection: close\\r\\n\" .\n\t\t\t($user_agent ? \"User-Agent: $user_agent\\r\\n\" : '') .\n\t\t\t\"Content-Type: text/xml\\r\\n\" .\n\t\t\t\"Content-Length: \" . strlen($data) . \"\\r\\n\\r\\n\";\n\n\t\tfputs($conn, \"$headers\");\n\t\tfputs($conn, $data);\n\n\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Sent the following request:</p>\\n\\n\" . XMLRPC_show($headers . $data, 'print_r', true));\n\t\t}\n\n\t\t//socket_set_blocking ($conn, false);\n\t\t$response = \"\";\n\t\twhile(!feof($conn)){\n\t\t\t$response .= fgets($conn, 1024);\n\t\t}\n\t\tfclose($conn);\n\n\t\t//strip headers off of response\n\t\t$data = XML_unserialize(substr($response, strpos($response, \"\\r\\n\\r\\n\")+4));\n\n\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Received the following response:</p>\\n\\n\" . XMLRPC_show($response, 'print_r', true) . \"<p>Which was serialized into the following data:</p>\\n\\n\" . XMLRPC_show($data, 'print_r', true));\n\t\t}\n\t\tif(isset($data['methodResponse']['fault'])){\n\t\t\t$return =  array(false, XMLRPC_adjustValue(&$data['methodResponse']['fault']['value']));\n\t\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Returning:</p>\\n\\n\" . XMLRPC_show($return, 'var_dump', true));\n\t\t\t}\n\t\t\treturn $return;\n\t\t}else{\n\t\t\t$return = array(true, XMLRPC_adjustValue(&$data['methodResponse']['params']['param']['value']));\n\t\t\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\t\t\tXMLRPC_debug('XMLRPC_request', \"<p>Returning:</p>\\n\\n\" . XMLRPC_show($return, 'var_dump', true));\n\t\t\t}\n\t\t\treturn $return;\n\t\t}\n\t}\n}\n\nfunction XMLRPC_response($return_value, $server = NULL){\n\t$data[\"methodResponse\"][\"params\"][\"param\"][\"value\"] = &$return_value;\n\t$return = XML_serialize(&$data);\n\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_response', \"<p>Received the following data to return:</p>\\n\\n\" . XMLRPC_show($return_value, 'print_r', true));\n\t}\n\n\theader(\"Connection: close\");\n\theader(\"Content-Length: \" . strlen($return));\n\theader(\"Content-Type: text/xml\");\n\theader(\"Date: \" . date(\"r\"));\n\tif($server){\n\t\theader(\"Server: $server\");\n\t}\n\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_response', \"<p>Sent the following response:</p>\\n\\n\" . XMLRPC_show($return, 'print_r', true));\n\t}\n\techo $return;\n}\n\nfunction XMLRPC_error($faultCode, $faultString, $server = NULL){\n\t$array[\"methodResponse\"][\"fault\"][\"value\"][\"struct\"][\"member\"] = array();\n\t$temp = &$array[\"methodResponse\"][\"fault\"][\"value\"][\"struct\"][\"member\"];\n\t$temp[0][\"name\"] = \"faultCode\";\n\t$temp[0][\"value\"][\"int\"] = $faultCode;\n\t$temp[1][\"name\"] = \"faultString\";\n\t$temp[1][\"value\"][\"string\"] = $faultString;\n\n\t$return = XML_serialize($array);\n\n\theader(\"Connection: close\");\n\theader(\"Content-Length: \" . strlen($return));\n\theader(\"Content-Type: text/xml\");\n\theader(\"Date: \" . date(\"r\"));\n\tif($server){\n\t\theader(\"Server: $server\");\n\t}\n\tif(defined('XMLRPC_DEBUG') and XMLRPC_DEBUG){\n\t\tXMLRPC_debug('XMLRPC_error', \"<p>Sent the following error response:</p>\\n\\n\" . XMLRPC_show($return, 'print_r', true));\n\t}\n\techo $return;\n}\n\nfunction XMLRPC_convert_timestamp_to_iso8601($timestamp){\n\t//takes a unix timestamp and converts it to iso8601 required by XMLRPC\n\t//an example iso8601 datetime is \"20010822T03:14:33\"\n\treturn date(\"Ymd\\TH:i:s\", $timestamp);\n}\n\nfunction XMLRPC_convert_iso8601_to_timestamp($iso8601){\n\treturn strtotime($iso8601);\n}\n\nfunction count_numeric_items(&$array){\n\treturn is_array($array) ? count(array_filter(array_keys($array), 'is_numeric')) : 0;\n}\n\nfunction XMLRPC_debug($function_name, $debug_message){\n\t$GLOBALS['XMLRPC_DEBUG_INFO'][] = array($function_name, $debug_message);\n}\n\nfunction XMLRPC_debug_print(){\n\tif($GLOBALS['XMLRPC_DEBUG_INFO']){\n\t\techo \"<table border=\\\"1\\\" width=\\\"100%\\\">\\n\";\n\t\tforeach($GLOBALS['XMLRPC_DEBUG_INFO'] as $debug){\n\t\t\techo \"<tr><th style=\\\"vertical-align: top\\\">$debug[0]</th><td>$debug[1]</td></tr>\\n\";\n\t\t}\n\t\techo \"</table>\\n\";\n\t\tunset($GLOBALS['XMLRPC_DEBUG_INFO']);\n\t}else{\n\t\techo \"<p>No debugging information available yet.</p>\";\n\t}\n}\n\nfunction XMLRPC_show($data, $func = \"print_r\", $return_str = false){\n\tob_start();\n\t$func($data);\n\t$output = ob_get_contents();\n\tob_end_clean();\n\tif($return_str){\n\t\treturn \"<pre>\" . htmlspecialchars($output) . \"</pre>\\n\";\n\t}else{\n\t\techo \"<pre>\", htmlspecialchars($output), \"</pre>\\n\";\n\t}\n}\n"],[0,"\n?>"]],"start1":25340,"start2":25340,"length1":29686,"length2":7}]],"length":25347,"saved":false}
